// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/finding"
)

// Finding is the model entity for the Finding schema.
type Finding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Value holds the value of the "value" field.
	Value              string `json:"value,omitempty"`
	attribute_findings *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Finding) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case finding.FieldID:
			values[i] = new(sql.NullInt64)
		case finding.FieldSource, finding.FieldName, finding.FieldValue:
			values[i] = new(sql.NullString)
		case finding.FieldTime:
			values[i] = new(sql.NullTime)
		case finding.ForeignKeys[0]: // attribute_findings
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Finding", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Finding fields.
func (f *Finding) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case finding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case finding.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				f.Time = value.Time
			}
		case finding.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				f.Source = value.String
			}
		case finding.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case finding.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				f.Value = value.String
			}
		case finding.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field attribute_findings", value)
			} else if value.Valid {
				f.attribute_findings = new(int)
				*f.attribute_findings = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Finding.
// Note that you need to call Finding.Unwrap() before calling this method if this Finding
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Finding) Update() *FindingUpdateOne {
	return (&FindingClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Finding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Finding) Unwrap() *Finding {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Finding is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Finding) String() string {
	var builder strings.Builder
	builder.WriteString("Finding(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", time=")
	builder.WriteString(f.Time.Format(time.ANSIC))
	builder.WriteString(", source=")
	builder.WriteString(f.Source)
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", value=")
	builder.WriteString(f.Value)
	builder.WriteByte(')')
	return builder.String()
}

// Findings is a parsable slice of Finding.
type Findings []*Finding

func (f Findings) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
