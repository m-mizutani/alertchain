// Code generated by entc, DO NOT EDIT.

package actionlog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/m-mizutani/alertchain/pkg/domain/types"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartedAt), v))
	})
}

// StoppedAt applies equality check predicate on the "stopped_at" field. It's identical to StoppedAtEQ.
func StoppedAt(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoppedAt), v))
	})
}

// Log applies equality check predicate on the "log" field. It's identical to LogEQ.
func Log(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLog), v))
	})
}

// Errmsg applies equality check predicate on the "errmsg" field. It's identical to ErrmsgEQ.
func Errmsg(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrmsg), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), vc))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartedAt), v))
	})
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartedAt), v))
	})
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...int64) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartedAt), v...))
	})
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...int64) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartedAt), v...))
	})
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartedAt), v))
	})
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartedAt), v))
	})
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartedAt), v))
	})
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartedAt), v))
	})
}

// StoppedAtEQ applies the EQ predicate on the "stopped_at" field.
func StoppedAtEQ(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoppedAt), v))
	})
}

// StoppedAtNEQ applies the NEQ predicate on the "stopped_at" field.
func StoppedAtNEQ(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoppedAt), v))
	})
}

// StoppedAtIn applies the In predicate on the "stopped_at" field.
func StoppedAtIn(vs ...int64) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStoppedAt), v...))
	})
}

// StoppedAtNotIn applies the NotIn predicate on the "stopped_at" field.
func StoppedAtNotIn(vs ...int64) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStoppedAt), v...))
	})
}

// StoppedAtGT applies the GT predicate on the "stopped_at" field.
func StoppedAtGT(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoppedAt), v))
	})
}

// StoppedAtGTE applies the GTE predicate on the "stopped_at" field.
func StoppedAtGTE(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoppedAt), v))
	})
}

// StoppedAtLT applies the LT predicate on the "stopped_at" field.
func StoppedAtLT(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoppedAt), v))
	})
}

// StoppedAtLTE applies the LTE predicate on the "stopped_at" field.
func StoppedAtLTE(v int64) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoppedAt), v))
	})
}

// StoppedAtIsNil applies the IsNil predicate on the "stopped_at" field.
func StoppedAtIsNil() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoppedAt)))
	})
}

// StoppedAtNotNil applies the NotNil predicate on the "stopped_at" field.
func StoppedAtNotNil() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoppedAt)))
	})
}

// LogEQ applies the EQ predicate on the "log" field.
func LogEQ(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLog), v))
	})
}

// LogNEQ applies the NEQ predicate on the "log" field.
func LogNEQ(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLog), v))
	})
}

// LogIn applies the In predicate on the "log" field.
func LogIn(vs ...string) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLog), v...))
	})
}

// LogNotIn applies the NotIn predicate on the "log" field.
func LogNotIn(vs ...string) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLog), v...))
	})
}

// LogGT applies the GT predicate on the "log" field.
func LogGT(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLog), v))
	})
}

// LogGTE applies the GTE predicate on the "log" field.
func LogGTE(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLog), v))
	})
}

// LogLT applies the LT predicate on the "log" field.
func LogLT(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLog), v))
	})
}

// LogLTE applies the LTE predicate on the "log" field.
func LogLTE(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLog), v))
	})
}

// LogContains applies the Contains predicate on the "log" field.
func LogContains(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLog), v))
	})
}

// LogHasPrefix applies the HasPrefix predicate on the "log" field.
func LogHasPrefix(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLog), v))
	})
}

// LogHasSuffix applies the HasSuffix predicate on the "log" field.
func LogHasSuffix(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLog), v))
	})
}

// LogIsNil applies the IsNil predicate on the "log" field.
func LogIsNil() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLog)))
	})
}

// LogNotNil applies the NotNil predicate on the "log" field.
func LogNotNil() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLog)))
	})
}

// LogEqualFold applies the EqualFold predicate on the "log" field.
func LogEqualFold(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLog), v))
	})
}

// LogContainsFold applies the ContainsFold predicate on the "log" field.
func LogContainsFold(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLog), v))
	})
}

// ErrmsgEQ applies the EQ predicate on the "errmsg" field.
func ErrmsgEQ(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrmsg), v))
	})
}

// ErrmsgNEQ applies the NEQ predicate on the "errmsg" field.
func ErrmsgNEQ(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldErrmsg), v))
	})
}

// ErrmsgIn applies the In predicate on the "errmsg" field.
func ErrmsgIn(vs ...string) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldErrmsg), v...))
	})
}

// ErrmsgNotIn applies the NotIn predicate on the "errmsg" field.
func ErrmsgNotIn(vs ...string) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldErrmsg), v...))
	})
}

// ErrmsgGT applies the GT predicate on the "errmsg" field.
func ErrmsgGT(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldErrmsg), v))
	})
}

// ErrmsgGTE applies the GTE predicate on the "errmsg" field.
func ErrmsgGTE(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldErrmsg), v))
	})
}

// ErrmsgLT applies the LT predicate on the "errmsg" field.
func ErrmsgLT(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldErrmsg), v))
	})
}

// ErrmsgLTE applies the LTE predicate on the "errmsg" field.
func ErrmsgLTE(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldErrmsg), v))
	})
}

// ErrmsgContains applies the Contains predicate on the "errmsg" field.
func ErrmsgContains(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldErrmsg), v))
	})
}

// ErrmsgHasPrefix applies the HasPrefix predicate on the "errmsg" field.
func ErrmsgHasPrefix(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldErrmsg), v))
	})
}

// ErrmsgHasSuffix applies the HasSuffix predicate on the "errmsg" field.
func ErrmsgHasSuffix(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldErrmsg), v))
	})
}

// ErrmsgIsNil applies the IsNil predicate on the "errmsg" field.
func ErrmsgIsNil() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldErrmsg)))
	})
}

// ErrmsgNotNil applies the NotNil predicate on the "errmsg" field.
func ErrmsgNotNil() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldErrmsg)))
	})
}

// ErrmsgEqualFold applies the EqualFold predicate on the "errmsg" field.
func ErrmsgEqualFold(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldErrmsg), v))
	})
}

// ErrmsgContainsFold applies the ContainsFold predicate on the "errmsg" field.
func ErrmsgContainsFold(v string) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldErrmsg), v))
	})
}

// ErrValuesIsNil applies the IsNil predicate on the "err_values" field.
func ErrValuesIsNil() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldErrValues)))
	})
}

// ErrValuesNotNil applies the NotNil predicate on the "err_values" field.
func ErrValuesNotNil() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldErrValues)))
	})
}

// StackTraceIsNil applies the IsNil predicate on the "stack_trace" field.
func StackTraceIsNil() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStackTrace)))
	})
}

// StackTraceNotNil applies the NotNil predicate on the "stack_trace" field.
func StackTraceNotNil() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStackTrace)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), vc))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), vc))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...types.ExecStatus) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...types.ExecStatus) predicate.ActionLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.ActionLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), vc))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), vc))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), vc))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), vc))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), vc))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), vc))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), vc))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), vc))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v types.ExecStatus) predicate.ActionLog {
	vc := string(v)
	return predicate.ActionLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), vc))
	})
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.Job) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ActionLog) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ActionLog) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ActionLog) predicate.ActionLog {
	return predicate.ActionLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
