// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/m-mizutani/alertchain/pkg/infra/ent/alert"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/attribute"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/finding"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/predicate"
	"github.com/m-mizutani/alertchain/types"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAlert     = "Alert"
	TypeAttribute = "Attribute"
	TypeFinding   = "Finding"
)

// AlertMutation represents an operation that mutates the Alert nodes in the graph.
type AlertMutation struct {
	config
	op                Op
	typ               string
	id                *types.AlertID
	title             *string
	description       *string
	detector          *string
	status            *types.AlertStatus
	severity          *types.Severity
	created_at        *int64
	addcreated_at     *int64
	detected_at       *int64
	adddetected_at    *int64
	closed_at         *int64
	addclosed_at      *int64
	clearedFields     map[string]struct{}
	attributes        map[int]struct{}
	removedattributes map[int]struct{}
	clearedattributes bool
	done              bool
	oldValue          func(context.Context) (*Alert, error)
	predicates        []predicate.Alert
}

var _ ent.Mutation = (*AlertMutation)(nil)

// alertOption allows management of the mutation configuration using functional options.
type alertOption func(*AlertMutation)

// newAlertMutation creates new mutation for the Alert entity.
func newAlertMutation(c config, op Op, opts ...alertOption) *AlertMutation {
	m := &AlertMutation{
		config:        c,
		op:            op,
		typ:           TypeAlert,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlertID sets the ID field of the mutation.
func withAlertID(id types.AlertID) alertOption {
	return func(m *AlertMutation) {
		var (
			err   error
			once  sync.Once
			value *Alert
		)
		m.oldValue = func(ctx context.Context) (*Alert, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Alert.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlert sets the old Alert of the mutation.
func withAlert(node *Alert) alertOption {
	return func(m *AlertMutation) {
		m.oldValue = func(context.Context) (*Alert, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlertMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlertMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Alert entities.
func (m *AlertMutation) SetID(id types.AlertID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AlertMutation) ID() (id types.AlertID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the "title" field.
func (m *AlertMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AlertMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *AlertMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[alert.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *AlertMutation) TitleCleared() bool {
	_, ok := m.clearedFields[alert.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *AlertMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, alert.FieldTitle)
}

// SetDescription sets the "description" field.
func (m *AlertMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AlertMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *AlertMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[alert.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *AlertMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[alert.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *AlertMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, alert.FieldDescription)
}

// SetDetector sets the "detector" field.
func (m *AlertMutation) SetDetector(s string) {
	m.detector = &s
}

// Detector returns the value of the "detector" field in the mutation.
func (m *AlertMutation) Detector() (r string, exists bool) {
	v := m.detector
	if v == nil {
		return
	}
	return *v, true
}

// OldDetector returns the old "detector" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldDetector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDetector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDetector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetector: %w", err)
	}
	return oldValue.Detector, nil
}

// ClearDetector clears the value of the "detector" field.
func (m *AlertMutation) ClearDetector() {
	m.detector = nil
	m.clearedFields[alert.FieldDetector] = struct{}{}
}

// DetectorCleared returns if the "detector" field was cleared in this mutation.
func (m *AlertMutation) DetectorCleared() bool {
	_, ok := m.clearedFields[alert.FieldDetector]
	return ok
}

// ResetDetector resets all changes to the "detector" field.
func (m *AlertMutation) ResetDetector() {
	m.detector = nil
	delete(m.clearedFields, alert.FieldDetector)
}

// SetStatus sets the "status" field.
func (m *AlertMutation) SetStatus(ts types.AlertStatus) {
	m.status = &ts
}

// Status returns the value of the "status" field in the mutation.
func (m *AlertMutation) Status() (r types.AlertStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldStatus(ctx context.Context) (v types.AlertStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *AlertMutation) ResetStatus() {
	m.status = nil
}

// SetSeverity sets the "severity" field.
func (m *AlertMutation) SetSeverity(t types.Severity) {
	m.severity = &t
}

// Severity returns the value of the "severity" field in the mutation.
func (m *AlertMutation) Severity() (r types.Severity, exists bool) {
	v := m.severity
	if v == nil {
		return
	}
	return *v, true
}

// OldSeverity returns the old "severity" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldSeverity(ctx context.Context) (v types.Severity, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSeverity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSeverity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeverity: %w", err)
	}
	return oldValue.Severity, nil
}

// ClearSeverity clears the value of the "severity" field.
func (m *AlertMutation) ClearSeverity() {
	m.severity = nil
	m.clearedFields[alert.FieldSeverity] = struct{}{}
}

// SeverityCleared returns if the "severity" field was cleared in this mutation.
func (m *AlertMutation) SeverityCleared() bool {
	_, ok := m.clearedFields[alert.FieldSeverity]
	return ok
}

// ResetSeverity resets all changes to the "severity" field.
func (m *AlertMutation) ResetSeverity() {
	m.severity = nil
	delete(m.clearedFields, alert.FieldSeverity)
}

// SetCreatedAt sets the "created_at" field.
func (m *AlertMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AlertMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *AlertMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AlertMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AlertMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetDetectedAt sets the "detected_at" field.
func (m *AlertMutation) SetDetectedAt(i int64) {
	m.detected_at = &i
	m.adddetected_at = nil
}

// DetectedAt returns the value of the "detected_at" field in the mutation.
func (m *AlertMutation) DetectedAt() (r int64, exists bool) {
	v := m.detected_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDetectedAt returns the old "detected_at" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldDetectedAt(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDetectedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDetectedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetectedAt: %w", err)
	}
	return oldValue.DetectedAt, nil
}

// AddDetectedAt adds i to the "detected_at" field.
func (m *AlertMutation) AddDetectedAt(i int64) {
	if m.adddetected_at != nil {
		*m.adddetected_at += i
	} else {
		m.adddetected_at = &i
	}
}

// AddedDetectedAt returns the value that was added to the "detected_at" field in this mutation.
func (m *AlertMutation) AddedDetectedAt() (r int64, exists bool) {
	v := m.adddetected_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearDetectedAt clears the value of the "detected_at" field.
func (m *AlertMutation) ClearDetectedAt() {
	m.detected_at = nil
	m.adddetected_at = nil
	m.clearedFields[alert.FieldDetectedAt] = struct{}{}
}

// DetectedAtCleared returns if the "detected_at" field was cleared in this mutation.
func (m *AlertMutation) DetectedAtCleared() bool {
	_, ok := m.clearedFields[alert.FieldDetectedAt]
	return ok
}

// ResetDetectedAt resets all changes to the "detected_at" field.
func (m *AlertMutation) ResetDetectedAt() {
	m.detected_at = nil
	m.adddetected_at = nil
	delete(m.clearedFields, alert.FieldDetectedAt)
}

// SetClosedAt sets the "closed_at" field.
func (m *AlertMutation) SetClosedAt(i int64) {
	m.closed_at = &i
	m.addclosed_at = nil
}

// ClosedAt returns the value of the "closed_at" field in the mutation.
func (m *AlertMutation) ClosedAt() (r int64, exists bool) {
	v := m.closed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldClosedAt returns the old "closed_at" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldClosedAt(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClosedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClosedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClosedAt: %w", err)
	}
	return oldValue.ClosedAt, nil
}

// AddClosedAt adds i to the "closed_at" field.
func (m *AlertMutation) AddClosedAt(i int64) {
	if m.addclosed_at != nil {
		*m.addclosed_at += i
	} else {
		m.addclosed_at = &i
	}
}

// AddedClosedAt returns the value that was added to the "closed_at" field in this mutation.
func (m *AlertMutation) AddedClosedAt() (r int64, exists bool) {
	v := m.addclosed_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearClosedAt clears the value of the "closed_at" field.
func (m *AlertMutation) ClearClosedAt() {
	m.closed_at = nil
	m.addclosed_at = nil
	m.clearedFields[alert.FieldClosedAt] = struct{}{}
}

// ClosedAtCleared returns if the "closed_at" field was cleared in this mutation.
func (m *AlertMutation) ClosedAtCleared() bool {
	_, ok := m.clearedFields[alert.FieldClosedAt]
	return ok
}

// ResetClosedAt resets all changes to the "closed_at" field.
func (m *AlertMutation) ResetClosedAt() {
	m.closed_at = nil
	m.addclosed_at = nil
	delete(m.clearedFields, alert.FieldClosedAt)
}

// AddAttributeIDs adds the "attributes" edge to the Attribute entity by ids.
func (m *AlertMutation) AddAttributeIDs(ids ...int) {
	if m.attributes == nil {
		m.attributes = make(map[int]struct{})
	}
	for i := range ids {
		m.attributes[ids[i]] = struct{}{}
	}
}

// ClearAttributes clears the "attributes" edge to the Attribute entity.
func (m *AlertMutation) ClearAttributes() {
	m.clearedattributes = true
}

// AttributesCleared reports if the "attributes" edge to the Attribute entity was cleared.
func (m *AlertMutation) AttributesCleared() bool {
	return m.clearedattributes
}

// RemoveAttributeIDs removes the "attributes" edge to the Attribute entity by IDs.
func (m *AlertMutation) RemoveAttributeIDs(ids ...int) {
	if m.removedattributes == nil {
		m.removedattributes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attributes, ids[i])
		m.removedattributes[ids[i]] = struct{}{}
	}
}

// RemovedAttributes returns the removed IDs of the "attributes" edge to the Attribute entity.
func (m *AlertMutation) RemovedAttributesIDs() (ids []int) {
	for id := range m.removedattributes {
		ids = append(ids, id)
	}
	return
}

// AttributesIDs returns the "attributes" edge IDs in the mutation.
func (m *AlertMutation) AttributesIDs() (ids []int) {
	for id := range m.attributes {
		ids = append(ids, id)
	}
	return
}

// ResetAttributes resets all changes to the "attributes" edge.
func (m *AlertMutation) ResetAttributes() {
	m.attributes = nil
	m.clearedattributes = false
	m.removedattributes = nil
}

// Where appends a list predicates to the AlertMutation builder.
func (m *AlertMutation) Where(ps ...predicate.Alert) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AlertMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Alert).
func (m *AlertMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlertMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.title != nil {
		fields = append(fields, alert.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, alert.FieldDescription)
	}
	if m.detector != nil {
		fields = append(fields, alert.FieldDetector)
	}
	if m.status != nil {
		fields = append(fields, alert.FieldStatus)
	}
	if m.severity != nil {
		fields = append(fields, alert.FieldSeverity)
	}
	if m.created_at != nil {
		fields = append(fields, alert.FieldCreatedAt)
	}
	if m.detected_at != nil {
		fields = append(fields, alert.FieldDetectedAt)
	}
	if m.closed_at != nil {
		fields = append(fields, alert.FieldClosedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlertMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case alert.FieldTitle:
		return m.Title()
	case alert.FieldDescription:
		return m.Description()
	case alert.FieldDetector:
		return m.Detector()
	case alert.FieldStatus:
		return m.Status()
	case alert.FieldSeverity:
		return m.Severity()
	case alert.FieldCreatedAt:
		return m.CreatedAt()
	case alert.FieldDetectedAt:
		return m.DetectedAt()
	case alert.FieldClosedAt:
		return m.ClosedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlertMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case alert.FieldTitle:
		return m.OldTitle(ctx)
	case alert.FieldDescription:
		return m.OldDescription(ctx)
	case alert.FieldDetector:
		return m.OldDetector(ctx)
	case alert.FieldStatus:
		return m.OldStatus(ctx)
	case alert.FieldSeverity:
		return m.OldSeverity(ctx)
	case alert.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case alert.FieldDetectedAt:
		return m.OldDetectedAt(ctx)
	case alert.FieldClosedAt:
		return m.OldClosedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Alert field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlertMutation) SetField(name string, value ent.Value) error {
	switch name {
	case alert.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case alert.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case alert.FieldDetector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetector(v)
		return nil
	case alert.FieldStatus:
		v, ok := value.(types.AlertStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case alert.FieldSeverity:
		v, ok := value.(types.Severity)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeverity(v)
		return nil
	case alert.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case alert.FieldDetectedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetectedAt(v)
		return nil
	case alert.FieldClosedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClosedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Alert field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlertMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, alert.FieldCreatedAt)
	}
	if m.adddetected_at != nil {
		fields = append(fields, alert.FieldDetectedAt)
	}
	if m.addclosed_at != nil {
		fields = append(fields, alert.FieldClosedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlertMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case alert.FieldCreatedAt:
		return m.AddedCreatedAt()
	case alert.FieldDetectedAt:
		return m.AddedDetectedAt()
	case alert.FieldClosedAt:
		return m.AddedClosedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlertMutation) AddField(name string, value ent.Value) error {
	switch name {
	case alert.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case alert.FieldDetectedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDetectedAt(v)
		return nil
	case alert.FieldClosedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddClosedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Alert numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlertMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(alert.FieldTitle) {
		fields = append(fields, alert.FieldTitle)
	}
	if m.FieldCleared(alert.FieldDescription) {
		fields = append(fields, alert.FieldDescription)
	}
	if m.FieldCleared(alert.FieldDetector) {
		fields = append(fields, alert.FieldDetector)
	}
	if m.FieldCleared(alert.FieldSeverity) {
		fields = append(fields, alert.FieldSeverity)
	}
	if m.FieldCleared(alert.FieldDetectedAt) {
		fields = append(fields, alert.FieldDetectedAt)
	}
	if m.FieldCleared(alert.FieldClosedAt) {
		fields = append(fields, alert.FieldClosedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlertMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlertMutation) ClearField(name string) error {
	switch name {
	case alert.FieldTitle:
		m.ClearTitle()
		return nil
	case alert.FieldDescription:
		m.ClearDescription()
		return nil
	case alert.FieldDetector:
		m.ClearDetector()
		return nil
	case alert.FieldSeverity:
		m.ClearSeverity()
		return nil
	case alert.FieldDetectedAt:
		m.ClearDetectedAt()
		return nil
	case alert.FieldClosedAt:
		m.ClearClosedAt()
		return nil
	}
	return fmt.Errorf("unknown Alert nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlertMutation) ResetField(name string) error {
	switch name {
	case alert.FieldTitle:
		m.ResetTitle()
		return nil
	case alert.FieldDescription:
		m.ResetDescription()
		return nil
	case alert.FieldDetector:
		m.ResetDetector()
		return nil
	case alert.FieldStatus:
		m.ResetStatus()
		return nil
	case alert.FieldSeverity:
		m.ResetSeverity()
		return nil
	case alert.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case alert.FieldDetectedAt:
		m.ResetDetectedAt()
		return nil
	case alert.FieldClosedAt:
		m.ResetClosedAt()
		return nil
	}
	return fmt.Errorf("unknown Alert field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlertMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attributes != nil {
		edges = append(edges, alert.EdgeAttributes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlertMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case alert.EdgeAttributes:
		ids := make([]ent.Value, 0, len(m.attributes))
		for id := range m.attributes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlertMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedattributes != nil {
		edges = append(edges, alert.EdgeAttributes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlertMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case alert.EdgeAttributes:
		ids := make([]ent.Value, 0, len(m.removedattributes))
		for id := range m.removedattributes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlertMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattributes {
		edges = append(edges, alert.EdgeAttributes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlertMutation) EdgeCleared(name string) bool {
	switch name {
	case alert.EdgeAttributes:
		return m.clearedattributes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlertMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Alert unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlertMutation) ResetEdge(name string) error {
	switch name {
	case alert.EdgeAttributes:
		m.ResetAttributes()
		return nil
	}
	return fmt.Errorf("unknown Alert edge %s", name)
}

// AttributeMutation represents an operation that mutates the Attribute nodes in the graph.
type AttributeMutation struct {
	config
	op              Op
	typ             string
	id              *int
	key             *string
	value           *string
	_type           *types.AttrType
	context         *[]string
	clearedFields   map[string]struct{}
	findings        map[int]struct{}
	removedfindings map[int]struct{}
	clearedfindings bool
	done            bool
	oldValue        func(context.Context) (*Attribute, error)
	predicates      []predicate.Attribute
}

var _ ent.Mutation = (*AttributeMutation)(nil)

// attributeOption allows management of the mutation configuration using functional options.
type attributeOption func(*AttributeMutation)

// newAttributeMutation creates new mutation for the Attribute entity.
func newAttributeMutation(c config, op Op, opts ...attributeOption) *AttributeMutation {
	m := &AttributeMutation{
		config:        c,
		op:            op,
		typ:           TypeAttribute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttributeID sets the ID field of the mutation.
func withAttributeID(id int) attributeOption {
	return func(m *AttributeMutation) {
		var (
			err   error
			once  sync.Once
			value *Attribute
		)
		m.oldValue = func(ctx context.Context) (*Attribute, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attribute.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttribute sets the old Attribute of the mutation.
func withAttribute(node *Attribute) attributeOption {
	return func(m *AttributeMutation) {
		m.oldValue = func(context.Context) (*Attribute, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttributeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttributeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttributeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetKey sets the "key" field.
func (m *AttributeMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *AttributeMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *AttributeMutation) ResetKey() {
	m.key = nil
}

// SetValue sets the "value" field.
func (m *AttributeMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *AttributeMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *AttributeMutation) ResetValue() {
	m.value = nil
}

// SetType sets the "type" field.
func (m *AttributeMutation) SetType(tt types.AttrType) {
	m._type = &tt
}

// GetType returns the value of the "type" field in the mutation.
func (m *AttributeMutation) GetType() (r types.AttrType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldType(ctx context.Context) (v types.AttrType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *AttributeMutation) ResetType() {
	m._type = nil
}

// SetContext sets the "context" field.
func (m *AttributeMutation) SetContext(s []string) {
	m.context = &s
}

// Context returns the value of the "context" field in the mutation.
func (m *AttributeMutation) Context() (r []string, exists bool) {
	v := m.context
	if v == nil {
		return
	}
	return *v, true
}

// OldContext returns the old "context" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldContext(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContext is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContext requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContext: %w", err)
	}
	return oldValue.Context, nil
}

// ResetContext resets all changes to the "context" field.
func (m *AttributeMutation) ResetContext() {
	m.context = nil
}

// AddFindingIDs adds the "findings" edge to the Finding entity by ids.
func (m *AttributeMutation) AddFindingIDs(ids ...int) {
	if m.findings == nil {
		m.findings = make(map[int]struct{})
	}
	for i := range ids {
		m.findings[ids[i]] = struct{}{}
	}
}

// ClearFindings clears the "findings" edge to the Finding entity.
func (m *AttributeMutation) ClearFindings() {
	m.clearedfindings = true
}

// FindingsCleared reports if the "findings" edge to the Finding entity was cleared.
func (m *AttributeMutation) FindingsCleared() bool {
	return m.clearedfindings
}

// RemoveFindingIDs removes the "findings" edge to the Finding entity by IDs.
func (m *AttributeMutation) RemoveFindingIDs(ids ...int) {
	if m.removedfindings == nil {
		m.removedfindings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.findings, ids[i])
		m.removedfindings[ids[i]] = struct{}{}
	}
}

// RemovedFindings returns the removed IDs of the "findings" edge to the Finding entity.
func (m *AttributeMutation) RemovedFindingsIDs() (ids []int) {
	for id := range m.removedfindings {
		ids = append(ids, id)
	}
	return
}

// FindingsIDs returns the "findings" edge IDs in the mutation.
func (m *AttributeMutation) FindingsIDs() (ids []int) {
	for id := range m.findings {
		ids = append(ids, id)
	}
	return
}

// ResetFindings resets all changes to the "findings" edge.
func (m *AttributeMutation) ResetFindings() {
	m.findings = nil
	m.clearedfindings = false
	m.removedfindings = nil
}

// Where appends a list predicates to the AttributeMutation builder.
func (m *AttributeMutation) Where(ps ...predicate.Attribute) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AttributeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Attribute).
func (m *AttributeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttributeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.key != nil {
		fields = append(fields, attribute.FieldKey)
	}
	if m.value != nil {
		fields = append(fields, attribute.FieldValue)
	}
	if m._type != nil {
		fields = append(fields, attribute.FieldType)
	}
	if m.context != nil {
		fields = append(fields, attribute.FieldContext)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttributeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attribute.FieldKey:
		return m.Key()
	case attribute.FieldValue:
		return m.Value()
	case attribute.FieldType:
		return m.GetType()
	case attribute.FieldContext:
		return m.Context()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttributeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attribute.FieldKey:
		return m.OldKey(ctx)
	case attribute.FieldValue:
		return m.OldValue(ctx)
	case attribute.FieldType:
		return m.OldType(ctx)
	case attribute.FieldContext:
		return m.OldContext(ctx)
	}
	return nil, fmt.Errorf("unknown Attribute field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attribute.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case attribute.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case attribute.FieldType:
		v, ok := value.(types.AttrType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case attribute.FieldContext:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContext(v)
		return nil
	}
	return fmt.Errorf("unknown Attribute field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttributeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttributeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Attribute numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttributeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttributeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttributeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Attribute nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttributeMutation) ResetField(name string) error {
	switch name {
	case attribute.FieldKey:
		m.ResetKey()
		return nil
	case attribute.FieldValue:
		m.ResetValue()
		return nil
	case attribute.FieldType:
		m.ResetType()
		return nil
	case attribute.FieldContext:
		m.ResetContext()
		return nil
	}
	return fmt.Errorf("unknown Attribute field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttributeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.findings != nil {
		edges = append(edges, attribute.EdgeFindings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttributeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attribute.EdgeFindings:
		ids := make([]ent.Value, 0, len(m.findings))
		for id := range m.findings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttributeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfindings != nil {
		edges = append(edges, attribute.EdgeFindings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttributeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case attribute.EdgeFindings:
		ids := make([]ent.Value, 0, len(m.removedfindings))
		for id := range m.removedfindings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttributeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfindings {
		edges = append(edges, attribute.EdgeFindings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttributeMutation) EdgeCleared(name string) bool {
	switch name {
	case attribute.EdgeFindings:
		return m.clearedfindings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttributeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Attribute unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttributeMutation) ResetEdge(name string) error {
	switch name {
	case attribute.EdgeFindings:
		m.ResetFindings()
		return nil
	}
	return fmt.Errorf("unknown Attribute edge %s", name)
}

// FindingMutation represents an operation that mutates the Finding nodes in the graph.
type FindingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	timestamp     *int64
	addtimestamp  *int64
	source        *string
	name          *string
	value         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Finding, error)
	predicates    []predicate.Finding
}

var _ ent.Mutation = (*FindingMutation)(nil)

// findingOption allows management of the mutation configuration using functional options.
type findingOption func(*FindingMutation)

// newFindingMutation creates new mutation for the Finding entity.
func newFindingMutation(c config, op Op, opts ...findingOption) *FindingMutation {
	m := &FindingMutation{
		config:        c,
		op:            op,
		typ:           TypeFinding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFindingID sets the ID field of the mutation.
func withFindingID(id int) findingOption {
	return func(m *FindingMutation) {
		var (
			err   error
			once  sync.Once
			value *Finding
		)
		m.oldValue = func(ctx context.Context) (*Finding, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Finding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFinding sets the old Finding of the mutation.
func withFinding(node *Finding) findingOption {
	return func(m *FindingMutation) {
		m.oldValue = func(context.Context) (*Finding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FindingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FindingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FindingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTimestamp sets the "timestamp" field.
func (m *FindingMutation) SetTimestamp(i int64) {
	m.timestamp = &i
	m.addtimestamp = nil
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *FindingMutation) Timestamp() (r int64, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Finding entity.
// If the Finding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FindingMutation) OldTimestamp(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// AddTimestamp adds i to the "timestamp" field.
func (m *FindingMutation) AddTimestamp(i int64) {
	if m.addtimestamp != nil {
		*m.addtimestamp += i
	} else {
		m.addtimestamp = &i
	}
}

// AddedTimestamp returns the value that was added to the "timestamp" field in this mutation.
func (m *FindingMutation) AddedTimestamp() (r int64, exists bool) {
	v := m.addtimestamp
	if v == nil {
		return
	}
	return *v, true
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *FindingMutation) ResetTimestamp() {
	m.timestamp = nil
	m.addtimestamp = nil
}

// SetSource sets the "source" field.
func (m *FindingMutation) SetSource(s string) {
	m.source = &s
}

// Source returns the value of the "source" field in the mutation.
func (m *FindingMutation) Source() (r string, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the Finding entity.
// If the Finding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FindingMutation) OldSource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *FindingMutation) ResetSource() {
	m.source = nil
}

// SetName sets the "name" field.
func (m *FindingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FindingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Finding entity.
// If the Finding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FindingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FindingMutation) ResetName() {
	m.name = nil
}

// SetValue sets the "value" field.
func (m *FindingMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *FindingMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Finding entity.
// If the Finding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FindingMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *FindingMutation) ResetValue() {
	m.value = nil
}

// Where appends a list predicates to the FindingMutation builder.
func (m *FindingMutation) Where(ps ...predicate.Finding) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FindingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Finding).
func (m *FindingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FindingMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.timestamp != nil {
		fields = append(fields, finding.FieldTimestamp)
	}
	if m.source != nil {
		fields = append(fields, finding.FieldSource)
	}
	if m.name != nil {
		fields = append(fields, finding.FieldName)
	}
	if m.value != nil {
		fields = append(fields, finding.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FindingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case finding.FieldTimestamp:
		return m.Timestamp()
	case finding.FieldSource:
		return m.Source()
	case finding.FieldName:
		return m.Name()
	case finding.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FindingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case finding.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case finding.FieldSource:
		return m.OldSource(ctx)
	case finding.FieldName:
		return m.OldName(ctx)
	case finding.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Finding field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FindingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case finding.FieldTimestamp:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case finding.FieldSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case finding.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case finding.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Finding field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FindingMutation) AddedFields() []string {
	var fields []string
	if m.addtimestamp != nil {
		fields = append(fields, finding.FieldTimestamp)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FindingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case finding.FieldTimestamp:
		return m.AddedTimestamp()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FindingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case finding.FieldTimestamp:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown Finding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FindingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FindingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FindingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Finding nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FindingMutation) ResetField(name string) error {
	switch name {
	case finding.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case finding.FieldSource:
		m.ResetSource()
		return nil
	case finding.FieldName:
		m.ResetName()
		return nil
	case finding.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Finding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FindingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FindingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FindingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FindingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FindingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FindingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FindingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Finding unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FindingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Finding edge %s", name)
}
