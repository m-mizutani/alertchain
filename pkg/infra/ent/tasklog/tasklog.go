// Code generated by entc, DO NOT EDIT.

package tasklog

import (
	"github.com/m-mizutani/alertchain/types"
)

const (
	// Label holds the string label denoting the tasklog type in the database.
	Label = "task_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskName holds the string denoting the task_name field in the database.
	FieldTaskName = "task_name"
	// FieldOptional holds the string denoting the optional field in the database.
	FieldOptional = "optional"
	// FieldStage holds the string denoting the stage field in the database.
	FieldStage = "stage"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldExitedAt holds the string denoting the exited_at field in the database.
	FieldExitedAt = "exited_at"
	// FieldLog holds the string denoting the log field in the database.
	FieldLog = "log"
	// FieldErrmsg holds the string denoting the errmsg field in the database.
	FieldErrmsg = "errmsg"
	// FieldErrValues holds the string denoting the err_values field in the database.
	FieldErrValues = "err_values"
	// FieldStackTrace holds the string denoting the stack_trace field in the database.
	FieldStackTrace = "stack_trace"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeAnnotated holds the string denoting the annotated edge name in mutations.
	EdgeAnnotated = "annotated"
	// Table holds the table name of the tasklog in the database.
	Table = "task_logs"
	// AnnotatedTable is the table that holds the annotated relation/edge.
	AnnotatedTable = "annotations"
	// AnnotatedInverseTable is the table name for the Annotation entity.
	// It exists in this package in order to avoid circular dependency with the "annotation" package.
	AnnotatedInverseTable = "annotations"
	// AnnotatedColumn is the table column denoting the annotated relation/edge.
	AnnotatedColumn = "task_log_annotated"
)

// Columns holds all SQL columns for tasklog fields.
var Columns = []string{
	FieldID,
	FieldTaskName,
	FieldOptional,
	FieldStage,
	FieldStartedAt,
	FieldExitedAt,
	FieldLog,
	FieldErrmsg,
	FieldErrValues,
	FieldStackTrace,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "task_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"alert_task_logs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOptional holds the default value on creation for the "optional" field.
	DefaultOptional bool
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus types.TaskStatus
)
