// Code generated by entc, DO NOT EDIT.

package tasklog

const (
	// Label holds the string label denoting the tasklog type in the database.
	Label = "task_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStage holds the string denoting the stage field in the database.
	FieldStage = "stage"
	// EdgeAnnotated holds the string denoting the annotated edge name in mutations.
	EdgeAnnotated = "annotated"
	// EdgeExecLogs holds the string denoting the exec_logs edge name in mutations.
	EdgeExecLogs = "exec_logs"
	// Table holds the table name of the tasklog in the database.
	Table = "task_logs"
	// AnnotatedTable is the table that holds the annotated relation/edge.
	AnnotatedTable = "annotations"
	// AnnotatedInverseTable is the table name for the Annotation entity.
	// It exists in this package in order to avoid circular dependency with the "annotation" package.
	AnnotatedInverseTable = "annotations"
	// AnnotatedColumn is the table column denoting the annotated relation/edge.
	AnnotatedColumn = "task_log_annotated"
	// ExecLogsTable is the table that holds the exec_logs relation/edge.
	ExecLogsTable = "exec_logs"
	// ExecLogsInverseTable is the table name for the ExecLog entity.
	// It exists in this package in order to avoid circular dependency with the "execlog" package.
	ExecLogsInverseTable = "exec_logs"
	// ExecLogsColumn is the table column denoting the exec_logs relation/edge.
	ExecLogsColumn = "task_log_exec_logs"
)

// Columns holds all SQL columns for tasklog fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldStage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "task_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"alert_task_logs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
