// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/annotation"
)

// Annotation is the model entity for the Annotation schema.
type Annotation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp int64 `json:"timestamp,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Value holds the value of the "value" field.
	Value                 string `json:"value,omitempty"`
	attribute_annotations *int
	task_log_annotated    *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Annotation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case annotation.FieldID, annotation.FieldTimestamp:
			values[i] = new(sql.NullInt64)
		case annotation.FieldSource, annotation.FieldName, annotation.FieldValue:
			values[i] = new(sql.NullString)
		case annotation.ForeignKeys[0]: // attribute_annotations
			values[i] = new(sql.NullInt64)
		case annotation.ForeignKeys[1]: // task_log_annotated
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Annotation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Annotation fields.
func (a *Annotation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case annotation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case annotation.FieldTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				a.Timestamp = value.Int64
			}
		case annotation.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				a.Source = value.String
			}
		case annotation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case annotation.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				a.Value = value.String
			}
		case annotation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field attribute_annotations", value)
			} else if value.Valid {
				a.attribute_annotations = new(int)
				*a.attribute_annotations = int(value.Int64)
			}
		case annotation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_log_annotated", value)
			} else if value.Valid {
				a.task_log_annotated = new(int)
				*a.task_log_annotated = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Annotation.
// Note that you need to call Annotation.Unwrap() before calling this method if this Annotation
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Annotation) Update() *AnnotationUpdateOne {
	return (&AnnotationClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Annotation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Annotation) Unwrap() *Annotation {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Annotation is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Annotation) String() string {
	var builder strings.Builder
	builder.WriteString("Annotation(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", timestamp=")
	builder.WriteString(fmt.Sprintf("%v", a.Timestamp))
	builder.WriteString(", source=")
	builder.WriteString(a.Source)
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", value=")
	builder.WriteString(a.Value)
	builder.WriteByte(')')
	return builder.String()
}

// Annotations is a parsable slice of Annotation.
type Annotations []*Annotation

func (a Annotations) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
