// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/actionlog"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/attribute"
	"github.com/m-mizutani/alertchain/types"
)

// ActionLogCreate is the builder for creating a ActionLog entity.
type ActionLogCreate struct {
	config
	mutation *ActionLogMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (alc *ActionLogCreate) SetName(s string) *ActionLogCreate {
	alc.mutation.SetName(s)
	return alc
}

// SetStartedAt sets the "started_at" field.
func (alc *ActionLogCreate) SetStartedAt(i int64) *ActionLogCreate {
	alc.mutation.SetStartedAt(i)
	return alc
}

// SetExitedAt sets the "exited_at" field.
func (alc *ActionLogCreate) SetExitedAt(i int64) *ActionLogCreate {
	alc.mutation.SetExitedAt(i)
	return alc
}

// SetNillableExitedAt sets the "exited_at" field if the given value is not nil.
func (alc *ActionLogCreate) SetNillableExitedAt(i *int64) *ActionLogCreate {
	if i != nil {
		alc.SetExitedAt(*i)
	}
	return alc
}

// SetLog sets the "log" field.
func (alc *ActionLogCreate) SetLog(s string) *ActionLogCreate {
	alc.mutation.SetLog(s)
	return alc
}

// SetNillableLog sets the "log" field if the given value is not nil.
func (alc *ActionLogCreate) SetNillableLog(s *string) *ActionLogCreate {
	if s != nil {
		alc.SetLog(*s)
	}
	return alc
}

// SetErrmsg sets the "errmsg" field.
func (alc *ActionLogCreate) SetErrmsg(s string) *ActionLogCreate {
	alc.mutation.SetErrmsg(s)
	return alc
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (alc *ActionLogCreate) SetNillableErrmsg(s *string) *ActionLogCreate {
	if s != nil {
		alc.SetErrmsg(*s)
	}
	return alc
}

// SetErrValues sets the "err_values" field.
func (alc *ActionLogCreate) SetErrValues(s []string) *ActionLogCreate {
	alc.mutation.SetErrValues(s)
	return alc
}

// SetStackTrace sets the "stack_trace" field.
func (alc *ActionLogCreate) SetStackTrace(s []string) *ActionLogCreate {
	alc.mutation.SetStackTrace(s)
	return alc
}

// SetStatus sets the "status" field.
func (alc *ActionLogCreate) SetStatus(ts types.TaskStatus) *ActionLogCreate {
	alc.mutation.SetStatus(ts)
	return alc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (alc *ActionLogCreate) SetNillableStatus(ts *types.TaskStatus) *ActionLogCreate {
	if ts != nil {
		alc.SetStatus(*ts)
	}
	return alc
}

// AddArgumentIDs adds the "argument" edge to the Attribute entity by IDs.
func (alc *ActionLogCreate) AddArgumentIDs(ids ...int) *ActionLogCreate {
	alc.mutation.AddArgumentIDs(ids...)
	return alc
}

// AddArgument adds the "argument" edges to the Attribute entity.
func (alc *ActionLogCreate) AddArgument(a ...*Attribute) *ActionLogCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return alc.AddArgumentIDs(ids...)
}

// Mutation returns the ActionLogMutation object of the builder.
func (alc *ActionLogCreate) Mutation() *ActionLogMutation {
	return alc.mutation
}

// Save creates the ActionLog in the database.
func (alc *ActionLogCreate) Save(ctx context.Context) (*ActionLog, error) {
	var (
		err  error
		node *ActionLog
	)
	alc.defaults()
	if len(alc.hooks) == 0 {
		if err = alc.check(); err != nil {
			return nil, err
		}
		node, err = alc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = alc.check(); err != nil {
				return nil, err
			}
			alc.mutation = mutation
			if node, err = alc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(alc.hooks) - 1; i >= 0; i-- {
			if alc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = alc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, alc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (alc *ActionLogCreate) SaveX(ctx context.Context) *ActionLog {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *ActionLogCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *ActionLogCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *ActionLogCreate) defaults() {
	if _, ok := alc.mutation.Status(); !ok {
		v := actionlog.DefaultStatus
		alc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *ActionLogCreate) check() error {
	if _, ok := alc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := alc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "started_at"`)}
	}
	if _, ok := alc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	return nil
}

func (alc *ActionLogCreate) sqlSave(ctx context.Context) (*ActionLog, error) {
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (alc *ActionLogCreate) createSpec() (*ActionLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ActionLog{config: alc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: actionlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actionlog.FieldID,
			},
		}
	)
	if value, ok := alc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionlog.FieldName,
		})
		_node.Name = value
	}
	if value, ok := alc.mutation.StartedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: actionlog.FieldStartedAt,
		})
		_node.StartedAt = value
	}
	if value, ok := alc.mutation.ExitedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: actionlog.FieldExitedAt,
		})
		_node.ExitedAt = value
	}
	if value, ok := alc.mutation.Log(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionlog.FieldLog,
		})
		_node.Log = value
	}
	if value, ok := alc.mutation.Errmsg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionlog.FieldErrmsg,
		})
		_node.Errmsg = value
	}
	if value, ok := alc.mutation.ErrValues(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: actionlog.FieldErrValues,
		})
		_node.ErrValues = value
	}
	if value, ok := alc.mutation.StackTrace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: actionlog.FieldStackTrace,
		})
		_node.StackTrace = value
	}
	if value, ok := alc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionlog.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := alc.mutation.ArgumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actionlog.ArgumentTable,
			Columns: []string{actionlog.ArgumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attribute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActionLogCreateBulk is the builder for creating many ActionLog entities in bulk.
type ActionLogCreateBulk struct {
	config
	builders []*ActionLogCreate
}

// Save creates the ActionLog entities in the database.
func (alcb *ActionLogCreateBulk) Save(ctx context.Context) ([]*ActionLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*ActionLog, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActionLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *ActionLogCreateBulk) SaveX(ctx context.Context) []*ActionLog {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *ActionLogCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *ActionLogCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}
