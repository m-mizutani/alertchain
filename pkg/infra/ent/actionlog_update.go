// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/actionlog"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/attribute"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/predicate"
	"github.com/m-mizutani/alertchain/types"
)

// ActionLogUpdate is the builder for updating ActionLog entities.
type ActionLogUpdate struct {
	config
	hooks    []Hook
	mutation *ActionLogMutation
}

// Where appends a list predicates to the ActionLogUpdate builder.
func (alu *ActionLogUpdate) Where(ps ...predicate.ActionLog) *ActionLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetExitedAt sets the "exited_at" field.
func (alu *ActionLogUpdate) SetExitedAt(i int64) *ActionLogUpdate {
	alu.mutation.ResetExitedAt()
	alu.mutation.SetExitedAt(i)
	return alu
}

// SetNillableExitedAt sets the "exited_at" field if the given value is not nil.
func (alu *ActionLogUpdate) SetNillableExitedAt(i *int64) *ActionLogUpdate {
	if i != nil {
		alu.SetExitedAt(*i)
	}
	return alu
}

// AddExitedAt adds i to the "exited_at" field.
func (alu *ActionLogUpdate) AddExitedAt(i int64) *ActionLogUpdate {
	alu.mutation.AddExitedAt(i)
	return alu
}

// ClearExitedAt clears the value of the "exited_at" field.
func (alu *ActionLogUpdate) ClearExitedAt() *ActionLogUpdate {
	alu.mutation.ClearExitedAt()
	return alu
}

// SetLog sets the "log" field.
func (alu *ActionLogUpdate) SetLog(s string) *ActionLogUpdate {
	alu.mutation.SetLog(s)
	return alu
}

// SetNillableLog sets the "log" field if the given value is not nil.
func (alu *ActionLogUpdate) SetNillableLog(s *string) *ActionLogUpdate {
	if s != nil {
		alu.SetLog(*s)
	}
	return alu
}

// ClearLog clears the value of the "log" field.
func (alu *ActionLogUpdate) ClearLog() *ActionLogUpdate {
	alu.mutation.ClearLog()
	return alu
}

// SetErrmsg sets the "errmsg" field.
func (alu *ActionLogUpdate) SetErrmsg(s string) *ActionLogUpdate {
	alu.mutation.SetErrmsg(s)
	return alu
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (alu *ActionLogUpdate) SetNillableErrmsg(s *string) *ActionLogUpdate {
	if s != nil {
		alu.SetErrmsg(*s)
	}
	return alu
}

// ClearErrmsg clears the value of the "errmsg" field.
func (alu *ActionLogUpdate) ClearErrmsg() *ActionLogUpdate {
	alu.mutation.ClearErrmsg()
	return alu
}

// SetErrValues sets the "err_values" field.
func (alu *ActionLogUpdate) SetErrValues(s []string) *ActionLogUpdate {
	alu.mutation.SetErrValues(s)
	return alu
}

// ClearErrValues clears the value of the "err_values" field.
func (alu *ActionLogUpdate) ClearErrValues() *ActionLogUpdate {
	alu.mutation.ClearErrValues()
	return alu
}

// SetStackTrace sets the "stack_trace" field.
func (alu *ActionLogUpdate) SetStackTrace(s []string) *ActionLogUpdate {
	alu.mutation.SetStackTrace(s)
	return alu
}

// ClearStackTrace clears the value of the "stack_trace" field.
func (alu *ActionLogUpdate) ClearStackTrace() *ActionLogUpdate {
	alu.mutation.ClearStackTrace()
	return alu
}

// SetStatus sets the "status" field.
func (alu *ActionLogUpdate) SetStatus(ts types.TaskStatus) *ActionLogUpdate {
	alu.mutation.SetStatus(ts)
	return alu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (alu *ActionLogUpdate) SetNillableStatus(ts *types.TaskStatus) *ActionLogUpdate {
	if ts != nil {
		alu.SetStatus(*ts)
	}
	return alu
}

// AddArgumentIDs adds the "argument" edge to the Attribute entity by IDs.
func (alu *ActionLogUpdate) AddArgumentIDs(ids ...int) *ActionLogUpdate {
	alu.mutation.AddArgumentIDs(ids...)
	return alu
}

// AddArgument adds the "argument" edges to the Attribute entity.
func (alu *ActionLogUpdate) AddArgument(a ...*Attribute) *ActionLogUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return alu.AddArgumentIDs(ids...)
}

// Mutation returns the ActionLogMutation object of the builder.
func (alu *ActionLogUpdate) Mutation() *ActionLogMutation {
	return alu.mutation
}

// ClearArgument clears all "argument" edges to the Attribute entity.
func (alu *ActionLogUpdate) ClearArgument() *ActionLogUpdate {
	alu.mutation.ClearArgument()
	return alu
}

// RemoveArgumentIDs removes the "argument" edge to Attribute entities by IDs.
func (alu *ActionLogUpdate) RemoveArgumentIDs(ids ...int) *ActionLogUpdate {
	alu.mutation.RemoveArgumentIDs(ids...)
	return alu
}

// RemoveArgument removes "argument" edges to Attribute entities.
func (alu *ActionLogUpdate) RemoveArgument(a ...*Attribute) *ActionLogUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return alu.RemoveArgumentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *ActionLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(alu.hooks) == 0 {
		affected, err = alu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			alu.mutation = mutation
			affected, err = alu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(alu.hooks) - 1; i >= 0; i-- {
			if alu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = alu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, alu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (alu *ActionLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *ActionLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *ActionLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (alu *ActionLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   actionlog.Table,
			Columns: actionlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actionlog.FieldID,
			},
		},
	}
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.ExitedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: actionlog.FieldExitedAt,
		})
	}
	if value, ok := alu.mutation.AddedExitedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: actionlog.FieldExitedAt,
		})
	}
	if alu.mutation.ExitedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: actionlog.FieldExitedAt,
		})
	}
	if value, ok := alu.mutation.Log(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionlog.FieldLog,
		})
	}
	if alu.mutation.LogCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: actionlog.FieldLog,
		})
	}
	if value, ok := alu.mutation.Errmsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionlog.FieldErrmsg,
		})
	}
	if alu.mutation.ErrmsgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: actionlog.FieldErrmsg,
		})
	}
	if value, ok := alu.mutation.ErrValues(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: actionlog.FieldErrValues,
		})
	}
	if alu.mutation.ErrValuesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: actionlog.FieldErrValues,
		})
	}
	if value, ok := alu.mutation.StackTrace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: actionlog.FieldStackTrace,
		})
	}
	if alu.mutation.StackTraceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: actionlog.FieldStackTrace,
		})
	}
	if value, ok := alu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionlog.FieldStatus,
		})
	}
	if alu.mutation.ArgumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actionlog.ArgumentTable,
			Columns: []string{actionlog.ArgumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attribute.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.RemovedArgumentIDs(); len(nodes) > 0 && !alu.mutation.ArgumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actionlog.ArgumentTable,
			Columns: []string{actionlog.ArgumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attribute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.ArgumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actionlog.ArgumentTable,
			Columns: []string{actionlog.ArgumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attribute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ActionLogUpdateOne is the builder for updating a single ActionLog entity.
type ActionLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActionLogMutation
}

// SetExitedAt sets the "exited_at" field.
func (aluo *ActionLogUpdateOne) SetExitedAt(i int64) *ActionLogUpdateOne {
	aluo.mutation.ResetExitedAt()
	aluo.mutation.SetExitedAt(i)
	return aluo
}

// SetNillableExitedAt sets the "exited_at" field if the given value is not nil.
func (aluo *ActionLogUpdateOne) SetNillableExitedAt(i *int64) *ActionLogUpdateOne {
	if i != nil {
		aluo.SetExitedAt(*i)
	}
	return aluo
}

// AddExitedAt adds i to the "exited_at" field.
func (aluo *ActionLogUpdateOne) AddExitedAt(i int64) *ActionLogUpdateOne {
	aluo.mutation.AddExitedAt(i)
	return aluo
}

// ClearExitedAt clears the value of the "exited_at" field.
func (aluo *ActionLogUpdateOne) ClearExitedAt() *ActionLogUpdateOne {
	aluo.mutation.ClearExitedAt()
	return aluo
}

// SetLog sets the "log" field.
func (aluo *ActionLogUpdateOne) SetLog(s string) *ActionLogUpdateOne {
	aluo.mutation.SetLog(s)
	return aluo
}

// SetNillableLog sets the "log" field if the given value is not nil.
func (aluo *ActionLogUpdateOne) SetNillableLog(s *string) *ActionLogUpdateOne {
	if s != nil {
		aluo.SetLog(*s)
	}
	return aluo
}

// ClearLog clears the value of the "log" field.
func (aluo *ActionLogUpdateOne) ClearLog() *ActionLogUpdateOne {
	aluo.mutation.ClearLog()
	return aluo
}

// SetErrmsg sets the "errmsg" field.
func (aluo *ActionLogUpdateOne) SetErrmsg(s string) *ActionLogUpdateOne {
	aluo.mutation.SetErrmsg(s)
	return aluo
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (aluo *ActionLogUpdateOne) SetNillableErrmsg(s *string) *ActionLogUpdateOne {
	if s != nil {
		aluo.SetErrmsg(*s)
	}
	return aluo
}

// ClearErrmsg clears the value of the "errmsg" field.
func (aluo *ActionLogUpdateOne) ClearErrmsg() *ActionLogUpdateOne {
	aluo.mutation.ClearErrmsg()
	return aluo
}

// SetErrValues sets the "err_values" field.
func (aluo *ActionLogUpdateOne) SetErrValues(s []string) *ActionLogUpdateOne {
	aluo.mutation.SetErrValues(s)
	return aluo
}

// ClearErrValues clears the value of the "err_values" field.
func (aluo *ActionLogUpdateOne) ClearErrValues() *ActionLogUpdateOne {
	aluo.mutation.ClearErrValues()
	return aluo
}

// SetStackTrace sets the "stack_trace" field.
func (aluo *ActionLogUpdateOne) SetStackTrace(s []string) *ActionLogUpdateOne {
	aluo.mutation.SetStackTrace(s)
	return aluo
}

// ClearStackTrace clears the value of the "stack_trace" field.
func (aluo *ActionLogUpdateOne) ClearStackTrace() *ActionLogUpdateOne {
	aluo.mutation.ClearStackTrace()
	return aluo
}

// SetStatus sets the "status" field.
func (aluo *ActionLogUpdateOne) SetStatus(ts types.TaskStatus) *ActionLogUpdateOne {
	aluo.mutation.SetStatus(ts)
	return aluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aluo *ActionLogUpdateOne) SetNillableStatus(ts *types.TaskStatus) *ActionLogUpdateOne {
	if ts != nil {
		aluo.SetStatus(*ts)
	}
	return aluo
}

// AddArgumentIDs adds the "argument" edge to the Attribute entity by IDs.
func (aluo *ActionLogUpdateOne) AddArgumentIDs(ids ...int) *ActionLogUpdateOne {
	aluo.mutation.AddArgumentIDs(ids...)
	return aluo
}

// AddArgument adds the "argument" edges to the Attribute entity.
func (aluo *ActionLogUpdateOne) AddArgument(a ...*Attribute) *ActionLogUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aluo.AddArgumentIDs(ids...)
}

// Mutation returns the ActionLogMutation object of the builder.
func (aluo *ActionLogUpdateOne) Mutation() *ActionLogMutation {
	return aluo.mutation
}

// ClearArgument clears all "argument" edges to the Attribute entity.
func (aluo *ActionLogUpdateOne) ClearArgument() *ActionLogUpdateOne {
	aluo.mutation.ClearArgument()
	return aluo
}

// RemoveArgumentIDs removes the "argument" edge to Attribute entities by IDs.
func (aluo *ActionLogUpdateOne) RemoveArgumentIDs(ids ...int) *ActionLogUpdateOne {
	aluo.mutation.RemoveArgumentIDs(ids...)
	return aluo
}

// RemoveArgument removes "argument" edges to Attribute entities.
func (aluo *ActionLogUpdateOne) RemoveArgument(a ...*Attribute) *ActionLogUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aluo.RemoveArgumentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *ActionLogUpdateOne) Select(field string, fields ...string) *ActionLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated ActionLog entity.
func (aluo *ActionLogUpdateOne) Save(ctx context.Context) (*ActionLog, error) {
	var (
		err  error
		node *ActionLog
	)
	if len(aluo.hooks) == 0 {
		node, err = aluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aluo.mutation = mutation
			node, err = aluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aluo.hooks) - 1; i >= 0; i-- {
			if aluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *ActionLogUpdateOne) SaveX(ctx context.Context) *ActionLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *ActionLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *ActionLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aluo *ActionLogUpdateOne) sqlSave(ctx context.Context) (_node *ActionLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   actionlog.Table,
			Columns: actionlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actionlog.FieldID,
			},
		},
	}
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ActionLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actionlog.FieldID)
		for _, f := range fields {
			if !actionlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != actionlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.ExitedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: actionlog.FieldExitedAt,
		})
	}
	if value, ok := aluo.mutation.AddedExitedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: actionlog.FieldExitedAt,
		})
	}
	if aluo.mutation.ExitedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: actionlog.FieldExitedAt,
		})
	}
	if value, ok := aluo.mutation.Log(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionlog.FieldLog,
		})
	}
	if aluo.mutation.LogCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: actionlog.FieldLog,
		})
	}
	if value, ok := aluo.mutation.Errmsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionlog.FieldErrmsg,
		})
	}
	if aluo.mutation.ErrmsgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: actionlog.FieldErrmsg,
		})
	}
	if value, ok := aluo.mutation.ErrValues(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: actionlog.FieldErrValues,
		})
	}
	if aluo.mutation.ErrValuesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: actionlog.FieldErrValues,
		})
	}
	if value, ok := aluo.mutation.StackTrace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: actionlog.FieldStackTrace,
		})
	}
	if aluo.mutation.StackTraceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: actionlog.FieldStackTrace,
		})
	}
	if value, ok := aluo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionlog.FieldStatus,
		})
	}
	if aluo.mutation.ArgumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actionlog.ArgumentTable,
			Columns: []string{actionlog.ArgumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attribute.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.RemovedArgumentIDs(); len(nodes) > 0 && !aluo.mutation.ArgumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actionlog.ArgumentTable,
			Columns: []string{actionlog.ArgumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attribute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.ArgumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actionlog.ArgumentTable,
			Columns: []string{actionlog.ArgumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attribute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActionLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
