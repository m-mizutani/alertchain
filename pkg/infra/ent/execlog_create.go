// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/alertchain/pkg/domain/types"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/execlog"
)

// ExecLogCreate is the builder for creating a ExecLog entity.
type ExecLogCreate struct {
	config
	mutation *ExecLogMutation
	hooks    []Hook
}

// SetTimestamp sets the "timestamp" field.
func (elc *ExecLogCreate) SetTimestamp(i int64) *ExecLogCreate {
	elc.mutation.SetTimestamp(i)
	return elc
}

// SetLog sets the "log" field.
func (elc *ExecLogCreate) SetLog(s string) *ExecLogCreate {
	elc.mutation.SetLog(s)
	return elc
}

// SetNillableLog sets the "log" field if the given value is not nil.
func (elc *ExecLogCreate) SetNillableLog(s *string) *ExecLogCreate {
	if s != nil {
		elc.SetLog(*s)
	}
	return elc
}

// SetErrmsg sets the "errmsg" field.
func (elc *ExecLogCreate) SetErrmsg(s string) *ExecLogCreate {
	elc.mutation.SetErrmsg(s)
	return elc
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (elc *ExecLogCreate) SetNillableErrmsg(s *string) *ExecLogCreate {
	if s != nil {
		elc.SetErrmsg(*s)
	}
	return elc
}

// SetErrValues sets the "err_values" field.
func (elc *ExecLogCreate) SetErrValues(s []string) *ExecLogCreate {
	elc.mutation.SetErrValues(s)
	return elc
}

// SetStackTrace sets the "stack_trace" field.
func (elc *ExecLogCreate) SetStackTrace(s []string) *ExecLogCreate {
	elc.mutation.SetStackTrace(s)
	return elc
}

// SetStatus sets the "status" field.
func (elc *ExecLogCreate) SetStatus(ts types.ExecStatus) *ExecLogCreate {
	elc.mutation.SetStatus(ts)
	return elc
}

// Mutation returns the ExecLogMutation object of the builder.
func (elc *ExecLogCreate) Mutation() *ExecLogMutation {
	return elc.mutation
}

// Save creates the ExecLog in the database.
func (elc *ExecLogCreate) Save(ctx context.Context) (*ExecLog, error) {
	var (
		err  error
		node *ExecLog
	)
	if len(elc.hooks) == 0 {
		if err = elc.check(); err != nil {
			return nil, err
		}
		node, err = elc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExecLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = elc.check(); err != nil {
				return nil, err
			}
			elc.mutation = mutation
			if node, err = elc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(elc.hooks) - 1; i >= 0; i-- {
			if elc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = elc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, elc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (elc *ExecLogCreate) SaveX(ctx context.Context) *ExecLog {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *ExecLogCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *ExecLogCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *ExecLogCreate) check() error {
	if _, ok := elc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "timestamp"`)}
	}
	if _, ok := elc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	return nil
}

func (elc *ExecLogCreate) sqlSave(ctx context.Context) (*ExecLog, error) {
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (elc *ExecLogCreate) createSpec() (*ExecLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ExecLog{config: elc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: execlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: execlog.FieldID,
			},
		}
	)
	if value, ok := elc.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execlog.FieldTimestamp,
		})
		_node.Timestamp = value
	}
	if value, ok := elc.mutation.Log(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: execlog.FieldLog,
		})
		_node.Log = value
	}
	if value, ok := elc.mutation.Errmsg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: execlog.FieldErrmsg,
		})
		_node.Errmsg = value
	}
	if value, ok := elc.mutation.ErrValues(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: execlog.FieldErrValues,
		})
		_node.ErrValues = value
	}
	if value, ok := elc.mutation.StackTrace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: execlog.FieldStackTrace,
		})
		_node.StackTrace = value
	}
	if value, ok := elc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: execlog.FieldStatus,
		})
		_node.Status = value
	}
	return _node, _spec
}

// ExecLogCreateBulk is the builder for creating many ExecLog entities in bulk.
type ExecLogCreateBulk struct {
	config
	builders []*ExecLogCreate
}

// Save creates the ExecLog entities in the database.
func (elcb *ExecLogCreateBulk) Save(ctx context.Context) ([]*ExecLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*ExecLog, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExecLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *ExecLogCreateBulk) SaveX(ctx context.Context) []*ExecLog {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *ExecLogCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *ExecLogCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}
