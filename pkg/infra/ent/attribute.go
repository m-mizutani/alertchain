// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/attribute"
	"github.com/m-mizutani/alertchain/types"
)

// Attribute is the model entity for the Attribute schema.
type Attribute struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Type holds the value of the "type" field.
	Type types.AttrType `json:"type,omitempty"`
	// Context holds the value of the "context" field.
	Context []string `json:"context,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttributeQuery when eager-loading is set.
	Edges            AttributeEdges `json:"edges"`
	alert_attributes *types.AlertID
}

// AttributeEdges holds the relations/edges for other nodes in the graph.
type AttributeEdges struct {
	// Annotations holds the value of the annotations edge.
	Annotations []*Annotation `json:"annotations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AnnotationsOrErr returns the Annotations value or an error if the edge
// was not loaded in eager-loading.
func (e AttributeEdges) AnnotationsOrErr() ([]*Annotation, error) {
	if e.loadedTypes[0] {
		return e.Annotations, nil
	}
	return nil, &NotLoadedError{edge: "annotations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attribute) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case attribute.FieldContext:
			values[i] = new([]byte)
		case attribute.FieldID:
			values[i] = new(sql.NullInt64)
		case attribute.FieldKey, attribute.FieldValue, attribute.FieldType:
			values[i] = new(sql.NullString)
		case attribute.ForeignKeys[0]: // alert_attributes
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Attribute", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attribute fields.
func (a *Attribute) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attribute.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case attribute.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				a.Key = value.String
			}
		case attribute.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				a.Value = value.String
			}
		case attribute.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = types.AttrType(value.String)
			}
		case attribute.FieldContext:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Context); err != nil {
					return fmt.Errorf("unmarshal field context: %w", err)
				}
			}
		case attribute.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_attributes", values[i])
			} else if value.Valid {
				a.alert_attributes = new(types.AlertID)
				*a.alert_attributes = types.AlertID(value.String)
			}
		}
	}
	return nil
}

// QueryAnnotations queries the "annotations" edge of the Attribute entity.
func (a *Attribute) QueryAnnotations() *AnnotationQuery {
	return (&AttributeClient{config: a.config}).QueryAnnotations(a)
}

// Update returns a builder for updating this Attribute.
// Note that you need to call Attribute.Unwrap() before calling this method if this Attribute
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attribute) Update() *AttributeUpdateOne {
	return (&AttributeClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Attribute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attribute) Unwrap() *Attribute {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attribute is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attribute) String() string {
	var builder strings.Builder
	builder.WriteString("Attribute(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", key=")
	builder.WriteString(a.Key)
	builder.WriteString(", value=")
	builder.WriteString(a.Value)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", context=")
	builder.WriteString(fmt.Sprintf("%v", a.Context))
	builder.WriteByte(')')
	return builder.String()
}

// Attributes is a parsable slice of Attribute.
type Attributes []*Attribute

func (a Attributes) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
