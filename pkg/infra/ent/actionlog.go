// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/actionlog"
	"github.com/m-mizutani/alertchain/types"
)

// ActionLog is the model entity for the ActionLog schema.
type ActionLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActionLogQuery when eager-loading is set.
	Edges             ActionLogEdges `json:"edges"`
	alert_action_logs *types.AlertID
}

// ActionLogEdges holds the relations/edges for other nodes in the graph.
type ActionLogEdges struct {
	// Argument holds the value of the argument edge.
	Argument []*Attribute `json:"argument,omitempty"`
	// ExecLogs holds the value of the exec_logs edge.
	ExecLogs []*ExecLog `json:"exec_logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ArgumentOrErr returns the Argument value or an error if the edge
// was not loaded in eager-loading.
func (e ActionLogEdges) ArgumentOrErr() ([]*Attribute, error) {
	if e.loadedTypes[0] {
		return e.Argument, nil
	}
	return nil, &NotLoadedError{edge: "argument"}
}

// ExecLogsOrErr returns the ExecLogs value or an error if the edge
// was not loaded in eager-loading.
func (e ActionLogEdges) ExecLogsOrErr() ([]*ExecLog, error) {
	if e.loadedTypes[1] {
		return e.ExecLogs, nil
	}
	return nil, &NotLoadedError{edge: "exec_logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActionLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case actionlog.FieldID:
			values[i] = new(sql.NullInt64)
		case actionlog.FieldName:
			values[i] = new(sql.NullString)
		case actionlog.ForeignKeys[0]: // alert_action_logs
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ActionLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActionLog fields.
func (al *ActionLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case actionlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int(value.Int64)
		case actionlog.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				al.Name = value.String
			}
		case actionlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_action_logs", values[i])
			} else if value.Valid {
				al.alert_action_logs = new(types.AlertID)
				*al.alert_action_logs = types.AlertID(value.String)
			}
		}
	}
	return nil
}

// QueryArgument queries the "argument" edge of the ActionLog entity.
func (al *ActionLog) QueryArgument() *AttributeQuery {
	return (&ActionLogClient{config: al.config}).QueryArgument(al)
}

// QueryExecLogs queries the "exec_logs" edge of the ActionLog entity.
func (al *ActionLog) QueryExecLogs() *ExecLogQuery {
	return (&ActionLogClient{config: al.config}).QueryExecLogs(al)
}

// Update returns a builder for updating this ActionLog.
// Note that you need to call ActionLog.Unwrap() before calling this method if this ActionLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *ActionLog) Update() *ActionLogUpdateOne {
	return (&ActionLogClient{config: al.config}).UpdateOne(al)
}

// Unwrap unwraps the ActionLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *ActionLog) Unwrap() *ActionLog {
	tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActionLog is not a transactional entity")
	}
	al.config.driver = tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *ActionLog) String() string {
	var builder strings.Builder
	builder.WriteString("ActionLog(")
	builder.WriteString(fmt.Sprintf("id=%v", al.ID))
	builder.WriteString(", name=")
	builder.WriteString(al.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ActionLogs is a parsable slice of ActionLog.
type ActionLogs []*ActionLog

func (al ActionLogs) config(cfg config) {
	for _i := range al {
		al[_i].config = cfg
	}
}
