// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/execlog"
	"github.com/m-mizutani/alertchain/pkg/infra/ent/predicate"
)

// ExecLogUpdate is the builder for updating ExecLog entities.
type ExecLogUpdate struct {
	config
	hooks    []Hook
	mutation *ExecLogMutation
}

// Where appends a list predicates to the ExecLogUpdate builder.
func (elu *ExecLogUpdate) Where(ps ...predicate.ExecLog) *ExecLogUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetLog sets the "log" field.
func (elu *ExecLogUpdate) SetLog(s string) *ExecLogUpdate {
	elu.mutation.SetLog(s)
	return elu
}

// SetNillableLog sets the "log" field if the given value is not nil.
func (elu *ExecLogUpdate) SetNillableLog(s *string) *ExecLogUpdate {
	if s != nil {
		elu.SetLog(*s)
	}
	return elu
}

// ClearLog clears the value of the "log" field.
func (elu *ExecLogUpdate) ClearLog() *ExecLogUpdate {
	elu.mutation.ClearLog()
	return elu
}

// SetErrmsg sets the "errmsg" field.
func (elu *ExecLogUpdate) SetErrmsg(s string) *ExecLogUpdate {
	elu.mutation.SetErrmsg(s)
	return elu
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (elu *ExecLogUpdate) SetNillableErrmsg(s *string) *ExecLogUpdate {
	if s != nil {
		elu.SetErrmsg(*s)
	}
	return elu
}

// ClearErrmsg clears the value of the "errmsg" field.
func (elu *ExecLogUpdate) ClearErrmsg() *ExecLogUpdate {
	elu.mutation.ClearErrmsg()
	return elu
}

// SetErrValues sets the "err_values" field.
func (elu *ExecLogUpdate) SetErrValues(s []string) *ExecLogUpdate {
	elu.mutation.SetErrValues(s)
	return elu
}

// ClearErrValues clears the value of the "err_values" field.
func (elu *ExecLogUpdate) ClearErrValues() *ExecLogUpdate {
	elu.mutation.ClearErrValues()
	return elu
}

// SetStackTrace sets the "stack_trace" field.
func (elu *ExecLogUpdate) SetStackTrace(s []string) *ExecLogUpdate {
	elu.mutation.SetStackTrace(s)
	return elu
}

// ClearStackTrace clears the value of the "stack_trace" field.
func (elu *ExecLogUpdate) ClearStackTrace() *ExecLogUpdate {
	elu.mutation.ClearStackTrace()
	return elu
}

// Mutation returns the ExecLogMutation object of the builder.
func (elu *ExecLogUpdate) Mutation() *ExecLogMutation {
	return elu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *ExecLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(elu.hooks) == 0 {
		affected, err = elu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExecLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			elu.mutation = mutation
			affected, err = elu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(elu.hooks) - 1; i >= 0; i-- {
			if elu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = elu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, elu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (elu *ExecLogUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *ExecLogUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *ExecLogUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (elu *ExecLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   execlog.Table,
			Columns: execlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: execlog.FieldID,
			},
		},
	}
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.Log(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: execlog.FieldLog,
		})
	}
	if elu.mutation.LogCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: execlog.FieldLog,
		})
	}
	if value, ok := elu.mutation.Errmsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: execlog.FieldErrmsg,
		})
	}
	if elu.mutation.ErrmsgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: execlog.FieldErrmsg,
		})
	}
	if value, ok := elu.mutation.ErrValues(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: execlog.FieldErrValues,
		})
	}
	if elu.mutation.ErrValuesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: execlog.FieldErrValues,
		})
	}
	if value, ok := elu.mutation.StackTrace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: execlog.FieldStackTrace,
		})
	}
	if elu.mutation.StackTraceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: execlog.FieldStackTrace,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{execlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ExecLogUpdateOne is the builder for updating a single ExecLog entity.
type ExecLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExecLogMutation
}

// SetLog sets the "log" field.
func (eluo *ExecLogUpdateOne) SetLog(s string) *ExecLogUpdateOne {
	eluo.mutation.SetLog(s)
	return eluo
}

// SetNillableLog sets the "log" field if the given value is not nil.
func (eluo *ExecLogUpdateOne) SetNillableLog(s *string) *ExecLogUpdateOne {
	if s != nil {
		eluo.SetLog(*s)
	}
	return eluo
}

// ClearLog clears the value of the "log" field.
func (eluo *ExecLogUpdateOne) ClearLog() *ExecLogUpdateOne {
	eluo.mutation.ClearLog()
	return eluo
}

// SetErrmsg sets the "errmsg" field.
func (eluo *ExecLogUpdateOne) SetErrmsg(s string) *ExecLogUpdateOne {
	eluo.mutation.SetErrmsg(s)
	return eluo
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (eluo *ExecLogUpdateOne) SetNillableErrmsg(s *string) *ExecLogUpdateOne {
	if s != nil {
		eluo.SetErrmsg(*s)
	}
	return eluo
}

// ClearErrmsg clears the value of the "errmsg" field.
func (eluo *ExecLogUpdateOne) ClearErrmsg() *ExecLogUpdateOne {
	eluo.mutation.ClearErrmsg()
	return eluo
}

// SetErrValues sets the "err_values" field.
func (eluo *ExecLogUpdateOne) SetErrValues(s []string) *ExecLogUpdateOne {
	eluo.mutation.SetErrValues(s)
	return eluo
}

// ClearErrValues clears the value of the "err_values" field.
func (eluo *ExecLogUpdateOne) ClearErrValues() *ExecLogUpdateOne {
	eluo.mutation.ClearErrValues()
	return eluo
}

// SetStackTrace sets the "stack_trace" field.
func (eluo *ExecLogUpdateOne) SetStackTrace(s []string) *ExecLogUpdateOne {
	eluo.mutation.SetStackTrace(s)
	return eluo
}

// ClearStackTrace clears the value of the "stack_trace" field.
func (eluo *ExecLogUpdateOne) ClearStackTrace() *ExecLogUpdateOne {
	eluo.mutation.ClearStackTrace()
	return eluo
}

// Mutation returns the ExecLogMutation object of the builder.
func (eluo *ExecLogUpdateOne) Mutation() *ExecLogMutation {
	return eluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *ExecLogUpdateOne) Select(field string, fields ...string) *ExecLogUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated ExecLog entity.
func (eluo *ExecLogUpdateOne) Save(ctx context.Context) (*ExecLog, error) {
	var (
		err  error
		node *ExecLog
	)
	if len(eluo.hooks) == 0 {
		node, err = eluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExecLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eluo.mutation = mutation
			node, err = eluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eluo.hooks) - 1; i >= 0; i-- {
			if eluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *ExecLogUpdateOne) SaveX(ctx context.Context) *ExecLog {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *ExecLogUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *ExecLogUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eluo *ExecLogUpdateOne) sqlSave(ctx context.Context) (_node *ExecLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   execlog.Table,
			Columns: execlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: execlog.FieldID,
			},
		},
	}
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ExecLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, execlog.FieldID)
		for _, f := range fields {
			if !execlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != execlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.Log(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: execlog.FieldLog,
		})
	}
	if eluo.mutation.LogCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: execlog.FieldLog,
		})
	}
	if value, ok := eluo.mutation.Errmsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: execlog.FieldErrmsg,
		})
	}
	if eluo.mutation.ErrmsgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: execlog.FieldErrmsg,
		})
	}
	if value, ok := eluo.mutation.ErrValues(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: execlog.FieldErrValues,
		})
	}
	if eluo.mutation.ErrValuesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: execlog.FieldErrValues,
		})
	}
	if value, ok := eluo.mutation.StackTrace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: execlog.FieldStackTrace,
		})
	}
	if eluo.mutation.StackTraceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: execlog.FieldStackTrace,
		})
	}
	_node = &ExecLog{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{execlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
