package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/m-mizutani/alertchain/pkg/domain/model"
	"github.com/m-mizutani/alertchain/pkg/domain/types"
)

// Workflows is the resolver for the workflows field.
func (r *queryResolver) Workflows(ctx context.Context, offset *int, limit *int) ([]*model.WorkflowRecord, error) {
	newCtx := model.NewContext(model.WithBase(ctx))
	results, err := r.svc.Workflow.Get(newCtx, offset, limit)
	if err != nil {
		return nil, err
	}

	records := make([]*model.WorkflowRecord, len(results))
	for i, rec := range results {
		records[i] = &rec
	}
	return records, nil
}

// Workflow is the resolver for the workflow field.
func (r *queryResolver) Workflow(ctx context.Context, id string) (*model.WorkflowRecord, error) {
	newCtx := model.NewContext(model.WithBase(ctx))
	return r.svc.Workflow.Lookup(newCtx, types.WorkflowID(id))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
