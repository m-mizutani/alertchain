// Code generated by entc, DO NOT EDIT.

package job

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStep holds the string denoting the step field in the database.
	FieldStep = "step"
	// FieldInput holds the string denoting the input field in the database.
	FieldInput = "input"
	// EdgeAlert holds the string denoting the alert edge name in mutations.
	EdgeAlert = "alert"
	// EdgeActionLogs holds the string denoting the action_logs edge name in mutations.
	EdgeActionLogs = "action_logs"
	// Table holds the table name of the job in the database.
	Table = "jobs"
	// AlertTable is the table that holds the alert relation/edge.
	AlertTable = "jobs"
	// AlertInverseTable is the table name for the Alert entity.
	// It exists in this package in order to avoid circular dependency with the "alert" package.
	AlertInverseTable = "alerts"
	// AlertColumn is the table column denoting the alert relation/edge.
	AlertColumn = "alert_jobs"
	// ActionLogsTable is the table that holds the action_logs relation/edge.
	ActionLogsTable = "action_logs"
	// ActionLogsInverseTable is the table name for the ActionLog entity.
	// It exists in this package in order to avoid circular dependency with the "actionlog" package.
	ActionLogsInverseTable = "action_logs"
	// ActionLogsColumn is the table column denoting the action_logs relation/edge.
	ActionLogsColumn = "job_action_logs"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldStep,
	FieldInput,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"alert_jobs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
