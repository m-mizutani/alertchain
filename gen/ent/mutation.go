// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/m-mizutani/alertchain/gen/ent/actionlog"
	"github.com/m-mizutani/alertchain/gen/ent/alert"
	"github.com/m-mizutani/alertchain/gen/ent/annotation"
	"github.com/m-mizutani/alertchain/gen/ent/attribute"
	"github.com/m-mizutani/alertchain/gen/ent/job"
	"github.com/m-mizutani/alertchain/gen/ent/predicate"
	"github.com/m-mizutani/alertchain/gen/ent/reference"
	"github.com/m-mizutani/alertchain/pkg/domain/model"
	"github.com/m-mizutani/alertchain/pkg/domain/types"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActionLog  = "ActionLog"
	TypeAlert      = "Alert"
	TypeAnnotation = "Annotation"
	TypeAttribute  = "Attribute"
	TypeJob        = "Job"
	TypeReference  = "Reference"
)

// ActionLogMutation represents an operation that mutates the ActionLog nodes in the graph.
type ActionLogMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	started_at    *int64
	addstarted_at *int64
	stopped_at    *int64
	addstopped_at *int64
	log           *string
	errmsg        *string
	err_values    *[]string
	stack_trace   *[]string
	status        *types.ExecStatus
	clearedFields map[string]struct{}
	job           *int
	clearedjob    bool
	done          bool
	oldValue      func(context.Context) (*ActionLog, error)
	predicates    []predicate.ActionLog
}

var _ ent.Mutation = (*ActionLogMutation)(nil)

// actionlogOption allows management of the mutation configuration using functional options.
type actionlogOption func(*ActionLogMutation)

// newActionLogMutation creates new mutation for the ActionLog entity.
func newActionLogMutation(c config, op Op, opts ...actionlogOption) *ActionLogMutation {
	m := &ActionLogMutation{
		config:        c,
		op:            op,
		typ:           TypeActionLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActionLogID sets the ID field of the mutation.
func withActionLogID(id int) actionlogOption {
	return func(m *ActionLogMutation) {
		var (
			err   error
			once  sync.Once
			value *ActionLog
		)
		m.oldValue = func(ctx context.Context) (*ActionLog, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ActionLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActionLog sets the old ActionLog of the mutation.
func withActionLog(node *ActionLog) actionlogOption {
	return func(m *ActionLogMutation) {
		m.oldValue = func(context.Context) (*ActionLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActionLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActionLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActionLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ActionLogMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ActionLogMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ActionLog entity.
// If the ActionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionLogMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ActionLogMutation) ResetName() {
	m.name = nil
}

// SetStartedAt sets the "started_at" field.
func (m *ActionLogMutation) SetStartedAt(i int64) {
	m.started_at = &i
	m.addstarted_at = nil
}

// StartedAt returns the value of the "started_at" field in the mutation.
func (m *ActionLogMutation) StartedAt() (r int64, exists bool) {
	v := m.started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old "started_at" field's value of the ActionLog entity.
// If the ActionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionLogMutation) OldStartedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// AddStartedAt adds i to the "started_at" field.
func (m *ActionLogMutation) AddStartedAt(i int64) {
	if m.addstarted_at != nil {
		*m.addstarted_at += i
	} else {
		m.addstarted_at = &i
	}
}

// AddedStartedAt returns the value that was added to the "started_at" field in this mutation.
func (m *ActionLogMutation) AddedStartedAt() (r int64, exists bool) {
	v := m.addstarted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartedAt resets all changes to the "started_at" field.
func (m *ActionLogMutation) ResetStartedAt() {
	m.started_at = nil
	m.addstarted_at = nil
}

// SetStoppedAt sets the "stopped_at" field.
func (m *ActionLogMutation) SetStoppedAt(i int64) {
	m.stopped_at = &i
	m.addstopped_at = nil
}

// StoppedAt returns the value of the "stopped_at" field in the mutation.
func (m *ActionLogMutation) StoppedAt() (r int64, exists bool) {
	v := m.stopped_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStoppedAt returns the old "stopped_at" field's value of the ActionLog entity.
// If the ActionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionLogMutation) OldStoppedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStoppedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStoppedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoppedAt: %w", err)
	}
	return oldValue.StoppedAt, nil
}

// AddStoppedAt adds i to the "stopped_at" field.
func (m *ActionLogMutation) AddStoppedAt(i int64) {
	if m.addstopped_at != nil {
		*m.addstopped_at += i
	} else {
		m.addstopped_at = &i
	}
}

// AddedStoppedAt returns the value that was added to the "stopped_at" field in this mutation.
func (m *ActionLogMutation) AddedStoppedAt() (r int64, exists bool) {
	v := m.addstopped_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStoppedAt clears the value of the "stopped_at" field.
func (m *ActionLogMutation) ClearStoppedAt() {
	m.stopped_at = nil
	m.addstopped_at = nil
	m.clearedFields[actionlog.FieldStoppedAt] = struct{}{}
}

// StoppedAtCleared returns if the "stopped_at" field was cleared in this mutation.
func (m *ActionLogMutation) StoppedAtCleared() bool {
	_, ok := m.clearedFields[actionlog.FieldStoppedAt]
	return ok
}

// ResetStoppedAt resets all changes to the "stopped_at" field.
func (m *ActionLogMutation) ResetStoppedAt() {
	m.stopped_at = nil
	m.addstopped_at = nil
	delete(m.clearedFields, actionlog.FieldStoppedAt)
}

// SetLog sets the "log" field.
func (m *ActionLogMutation) SetLog(s string) {
	m.log = &s
}

// Log returns the value of the "log" field in the mutation.
func (m *ActionLogMutation) Log() (r string, exists bool) {
	v := m.log
	if v == nil {
		return
	}
	return *v, true
}

// OldLog returns the old "log" field's value of the ActionLog entity.
// If the ActionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionLogMutation) OldLog(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLog is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLog requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLog: %w", err)
	}
	return oldValue.Log, nil
}

// ClearLog clears the value of the "log" field.
func (m *ActionLogMutation) ClearLog() {
	m.log = nil
	m.clearedFields[actionlog.FieldLog] = struct{}{}
}

// LogCleared returns if the "log" field was cleared in this mutation.
func (m *ActionLogMutation) LogCleared() bool {
	_, ok := m.clearedFields[actionlog.FieldLog]
	return ok
}

// ResetLog resets all changes to the "log" field.
func (m *ActionLogMutation) ResetLog() {
	m.log = nil
	delete(m.clearedFields, actionlog.FieldLog)
}

// SetErrmsg sets the "errmsg" field.
func (m *ActionLogMutation) SetErrmsg(s string) {
	m.errmsg = &s
}

// Errmsg returns the value of the "errmsg" field in the mutation.
func (m *ActionLogMutation) Errmsg() (r string, exists bool) {
	v := m.errmsg
	if v == nil {
		return
	}
	return *v, true
}

// OldErrmsg returns the old "errmsg" field's value of the ActionLog entity.
// If the ActionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionLogMutation) OldErrmsg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldErrmsg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldErrmsg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrmsg: %w", err)
	}
	return oldValue.Errmsg, nil
}

// ClearErrmsg clears the value of the "errmsg" field.
func (m *ActionLogMutation) ClearErrmsg() {
	m.errmsg = nil
	m.clearedFields[actionlog.FieldErrmsg] = struct{}{}
}

// ErrmsgCleared returns if the "errmsg" field was cleared in this mutation.
func (m *ActionLogMutation) ErrmsgCleared() bool {
	_, ok := m.clearedFields[actionlog.FieldErrmsg]
	return ok
}

// ResetErrmsg resets all changes to the "errmsg" field.
func (m *ActionLogMutation) ResetErrmsg() {
	m.errmsg = nil
	delete(m.clearedFields, actionlog.FieldErrmsg)
}

// SetErrValues sets the "err_values" field.
func (m *ActionLogMutation) SetErrValues(s []string) {
	m.err_values = &s
}

// ErrValues returns the value of the "err_values" field in the mutation.
func (m *ActionLogMutation) ErrValues() (r []string, exists bool) {
	v := m.err_values
	if v == nil {
		return
	}
	return *v, true
}

// OldErrValues returns the old "err_values" field's value of the ActionLog entity.
// If the ActionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionLogMutation) OldErrValues(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldErrValues is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldErrValues requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrValues: %w", err)
	}
	return oldValue.ErrValues, nil
}

// ClearErrValues clears the value of the "err_values" field.
func (m *ActionLogMutation) ClearErrValues() {
	m.err_values = nil
	m.clearedFields[actionlog.FieldErrValues] = struct{}{}
}

// ErrValuesCleared returns if the "err_values" field was cleared in this mutation.
func (m *ActionLogMutation) ErrValuesCleared() bool {
	_, ok := m.clearedFields[actionlog.FieldErrValues]
	return ok
}

// ResetErrValues resets all changes to the "err_values" field.
func (m *ActionLogMutation) ResetErrValues() {
	m.err_values = nil
	delete(m.clearedFields, actionlog.FieldErrValues)
}

// SetStackTrace sets the "stack_trace" field.
func (m *ActionLogMutation) SetStackTrace(s []string) {
	m.stack_trace = &s
}

// StackTrace returns the value of the "stack_trace" field in the mutation.
func (m *ActionLogMutation) StackTrace() (r []string, exists bool) {
	v := m.stack_trace
	if v == nil {
		return
	}
	return *v, true
}

// OldStackTrace returns the old "stack_trace" field's value of the ActionLog entity.
// If the ActionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionLogMutation) OldStackTrace(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStackTrace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStackTrace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStackTrace: %w", err)
	}
	return oldValue.StackTrace, nil
}

// ClearStackTrace clears the value of the "stack_trace" field.
func (m *ActionLogMutation) ClearStackTrace() {
	m.stack_trace = nil
	m.clearedFields[actionlog.FieldStackTrace] = struct{}{}
}

// StackTraceCleared returns if the "stack_trace" field was cleared in this mutation.
func (m *ActionLogMutation) StackTraceCleared() bool {
	_, ok := m.clearedFields[actionlog.FieldStackTrace]
	return ok
}

// ResetStackTrace resets all changes to the "stack_trace" field.
func (m *ActionLogMutation) ResetStackTrace() {
	m.stack_trace = nil
	delete(m.clearedFields, actionlog.FieldStackTrace)
}

// SetStatus sets the "status" field.
func (m *ActionLogMutation) SetStatus(ts types.ExecStatus) {
	m.status = &ts
}

// Status returns the value of the "status" field in the mutation.
func (m *ActionLogMutation) Status() (r types.ExecStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ActionLog entity.
// If the ActionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionLogMutation) OldStatus(ctx context.Context) (v types.ExecStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ActionLogMutation) ResetStatus() {
	m.status = nil
}

// SetJobID sets the "job" edge to the Job entity by id.
func (m *ActionLogMutation) SetJobID(id int) {
	m.job = &id
}

// ClearJob clears the "job" edge to the Job entity.
func (m *ActionLogMutation) ClearJob() {
	m.clearedjob = true
}

// JobCleared reports if the "job" edge to the Job entity was cleared.
func (m *ActionLogMutation) JobCleared() bool {
	return m.clearedjob
}

// JobID returns the "job" edge ID in the mutation.
func (m *ActionLogMutation) JobID() (id int, exists bool) {
	if m.job != nil {
		return *m.job, true
	}
	return
}

// JobIDs returns the "job" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// JobID instead. It exists only for internal usage by the builders.
func (m *ActionLogMutation) JobIDs() (ids []int) {
	if id := m.job; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetJob resets all changes to the "job" edge.
func (m *ActionLogMutation) ResetJob() {
	m.job = nil
	m.clearedjob = false
}

// Where appends a list predicates to the ActionLogMutation builder.
func (m *ActionLogMutation) Where(ps ...predicate.ActionLog) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ActionLogMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ActionLog).
func (m *ActionLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActionLogMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, actionlog.FieldName)
	}
	if m.started_at != nil {
		fields = append(fields, actionlog.FieldStartedAt)
	}
	if m.stopped_at != nil {
		fields = append(fields, actionlog.FieldStoppedAt)
	}
	if m.log != nil {
		fields = append(fields, actionlog.FieldLog)
	}
	if m.errmsg != nil {
		fields = append(fields, actionlog.FieldErrmsg)
	}
	if m.err_values != nil {
		fields = append(fields, actionlog.FieldErrValues)
	}
	if m.stack_trace != nil {
		fields = append(fields, actionlog.FieldStackTrace)
	}
	if m.status != nil {
		fields = append(fields, actionlog.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActionLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case actionlog.FieldName:
		return m.Name()
	case actionlog.FieldStartedAt:
		return m.StartedAt()
	case actionlog.FieldStoppedAt:
		return m.StoppedAt()
	case actionlog.FieldLog:
		return m.Log()
	case actionlog.FieldErrmsg:
		return m.Errmsg()
	case actionlog.FieldErrValues:
		return m.ErrValues()
	case actionlog.FieldStackTrace:
		return m.StackTrace()
	case actionlog.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActionLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case actionlog.FieldName:
		return m.OldName(ctx)
	case actionlog.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case actionlog.FieldStoppedAt:
		return m.OldStoppedAt(ctx)
	case actionlog.FieldLog:
		return m.OldLog(ctx)
	case actionlog.FieldErrmsg:
		return m.OldErrmsg(ctx)
	case actionlog.FieldErrValues:
		return m.OldErrValues(ctx)
	case actionlog.FieldStackTrace:
		return m.OldStackTrace(ctx)
	case actionlog.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown ActionLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case actionlog.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case actionlog.FieldStartedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case actionlog.FieldStoppedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoppedAt(v)
		return nil
	case actionlog.FieldLog:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLog(v)
		return nil
	case actionlog.FieldErrmsg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrmsg(v)
		return nil
	case actionlog.FieldErrValues:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrValues(v)
		return nil
	case actionlog.FieldStackTrace:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStackTrace(v)
		return nil
	case actionlog.FieldStatus:
		v, ok := value.(types.ExecStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ActionLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActionLogMutation) AddedFields() []string {
	var fields []string
	if m.addstarted_at != nil {
		fields = append(fields, actionlog.FieldStartedAt)
	}
	if m.addstopped_at != nil {
		fields = append(fields, actionlog.FieldStoppedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActionLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case actionlog.FieldStartedAt:
		return m.AddedStartedAt()
	case actionlog.FieldStoppedAt:
		return m.AddedStoppedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case actionlog.FieldStartedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartedAt(v)
		return nil
	case actionlog.FieldStoppedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStoppedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ActionLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActionLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(actionlog.FieldStoppedAt) {
		fields = append(fields, actionlog.FieldStoppedAt)
	}
	if m.FieldCleared(actionlog.FieldLog) {
		fields = append(fields, actionlog.FieldLog)
	}
	if m.FieldCleared(actionlog.FieldErrmsg) {
		fields = append(fields, actionlog.FieldErrmsg)
	}
	if m.FieldCleared(actionlog.FieldErrValues) {
		fields = append(fields, actionlog.FieldErrValues)
	}
	if m.FieldCleared(actionlog.FieldStackTrace) {
		fields = append(fields, actionlog.FieldStackTrace)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActionLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActionLogMutation) ClearField(name string) error {
	switch name {
	case actionlog.FieldStoppedAt:
		m.ClearStoppedAt()
		return nil
	case actionlog.FieldLog:
		m.ClearLog()
		return nil
	case actionlog.FieldErrmsg:
		m.ClearErrmsg()
		return nil
	case actionlog.FieldErrValues:
		m.ClearErrValues()
		return nil
	case actionlog.FieldStackTrace:
		m.ClearStackTrace()
		return nil
	}
	return fmt.Errorf("unknown ActionLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActionLogMutation) ResetField(name string) error {
	switch name {
	case actionlog.FieldName:
		m.ResetName()
		return nil
	case actionlog.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case actionlog.FieldStoppedAt:
		m.ResetStoppedAt()
		return nil
	case actionlog.FieldLog:
		m.ResetLog()
		return nil
	case actionlog.FieldErrmsg:
		m.ResetErrmsg()
		return nil
	case actionlog.FieldErrValues:
		m.ResetErrValues()
		return nil
	case actionlog.FieldStackTrace:
		m.ResetStackTrace()
		return nil
	case actionlog.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown ActionLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActionLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.job != nil {
		edges = append(edges, actionlog.EdgeJob)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActionLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case actionlog.EdgeJob:
		if id := m.job; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActionLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActionLogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActionLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedjob {
		edges = append(edges, actionlog.EdgeJob)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActionLogMutation) EdgeCleared(name string) bool {
	switch name {
	case actionlog.EdgeJob:
		return m.clearedjob
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActionLogMutation) ClearEdge(name string) error {
	switch name {
	case actionlog.EdgeJob:
		m.ClearJob()
		return nil
	}
	return fmt.Errorf("unknown ActionLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActionLogMutation) ResetEdge(name string) error {
	switch name {
	case actionlog.EdgeJob:
		m.ResetJob()
		return nil
	}
	return fmt.Errorf("unknown ActionLog edge %s", name)
}

// AlertMutation represents an operation that mutates the Alert nodes in the graph.
type AlertMutation struct {
	config
	op                Op
	typ               string
	id                *types.AlertID
	title             *string
	description       *string
	detector          *string
	status            *types.AlertStatus
	severity          *types.Severity
	detected_at       *int64
	adddetected_at    *int64
	created_at        *int64
	addcreated_at     *int64
	closed_at         *int64
	addclosed_at      *int64
	clearedFields     map[string]struct{}
	attributes        map[int]struct{}
	removedattributes map[int]struct{}
	clearedattributes bool
	references        map[int]struct{}
	removedreferences map[int]struct{}
	clearedreferences bool
	jobs              map[int]struct{}
	removedjobs       map[int]struct{}
	clearedjobs       bool
	done              bool
	oldValue          func(context.Context) (*Alert, error)
	predicates        []predicate.Alert
}

var _ ent.Mutation = (*AlertMutation)(nil)

// alertOption allows management of the mutation configuration using functional options.
type alertOption func(*AlertMutation)

// newAlertMutation creates new mutation for the Alert entity.
func newAlertMutation(c config, op Op, opts ...alertOption) *AlertMutation {
	m := &AlertMutation{
		config:        c,
		op:            op,
		typ:           TypeAlert,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlertID sets the ID field of the mutation.
func withAlertID(id types.AlertID) alertOption {
	return func(m *AlertMutation) {
		var (
			err   error
			once  sync.Once
			value *Alert
		)
		m.oldValue = func(ctx context.Context) (*Alert, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Alert.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlert sets the old Alert of the mutation.
func withAlert(node *Alert) alertOption {
	return func(m *AlertMutation) {
		m.oldValue = func(context.Context) (*Alert, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlertMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlertMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Alert entities.
func (m *AlertMutation) SetID(id types.AlertID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AlertMutation) ID() (id types.AlertID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the "title" field.
func (m *AlertMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AlertMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *AlertMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[alert.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *AlertMutation) TitleCleared() bool {
	_, ok := m.clearedFields[alert.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *AlertMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, alert.FieldTitle)
}

// SetDescription sets the "description" field.
func (m *AlertMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AlertMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *AlertMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[alert.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *AlertMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[alert.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *AlertMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, alert.FieldDescription)
}

// SetDetector sets the "detector" field.
func (m *AlertMutation) SetDetector(s string) {
	m.detector = &s
}

// Detector returns the value of the "detector" field in the mutation.
func (m *AlertMutation) Detector() (r string, exists bool) {
	v := m.detector
	if v == nil {
		return
	}
	return *v, true
}

// OldDetector returns the old "detector" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldDetector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDetector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDetector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetector: %w", err)
	}
	return oldValue.Detector, nil
}

// ClearDetector clears the value of the "detector" field.
func (m *AlertMutation) ClearDetector() {
	m.detector = nil
	m.clearedFields[alert.FieldDetector] = struct{}{}
}

// DetectorCleared returns if the "detector" field was cleared in this mutation.
func (m *AlertMutation) DetectorCleared() bool {
	_, ok := m.clearedFields[alert.FieldDetector]
	return ok
}

// ResetDetector resets all changes to the "detector" field.
func (m *AlertMutation) ResetDetector() {
	m.detector = nil
	delete(m.clearedFields, alert.FieldDetector)
}

// SetStatus sets the "status" field.
func (m *AlertMutation) SetStatus(ts types.AlertStatus) {
	m.status = &ts
}

// Status returns the value of the "status" field in the mutation.
func (m *AlertMutation) Status() (r types.AlertStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldStatus(ctx context.Context) (v types.AlertStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *AlertMutation) ResetStatus() {
	m.status = nil
}

// SetSeverity sets the "severity" field.
func (m *AlertMutation) SetSeverity(t types.Severity) {
	m.severity = &t
}

// Severity returns the value of the "severity" field in the mutation.
func (m *AlertMutation) Severity() (r types.Severity, exists bool) {
	v := m.severity
	if v == nil {
		return
	}
	return *v, true
}

// OldSeverity returns the old "severity" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldSeverity(ctx context.Context) (v types.Severity, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSeverity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSeverity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeverity: %w", err)
	}
	return oldValue.Severity, nil
}

// ClearSeverity clears the value of the "severity" field.
func (m *AlertMutation) ClearSeverity() {
	m.severity = nil
	m.clearedFields[alert.FieldSeverity] = struct{}{}
}

// SeverityCleared returns if the "severity" field was cleared in this mutation.
func (m *AlertMutation) SeverityCleared() bool {
	_, ok := m.clearedFields[alert.FieldSeverity]
	return ok
}

// ResetSeverity resets all changes to the "severity" field.
func (m *AlertMutation) ResetSeverity() {
	m.severity = nil
	delete(m.clearedFields, alert.FieldSeverity)
}

// SetDetectedAt sets the "detected_at" field.
func (m *AlertMutation) SetDetectedAt(i int64) {
	m.detected_at = &i
	m.adddetected_at = nil
}

// DetectedAt returns the value of the "detected_at" field in the mutation.
func (m *AlertMutation) DetectedAt() (r int64, exists bool) {
	v := m.detected_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDetectedAt returns the old "detected_at" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldDetectedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDetectedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDetectedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetectedAt: %w", err)
	}
	return oldValue.DetectedAt, nil
}

// AddDetectedAt adds i to the "detected_at" field.
func (m *AlertMutation) AddDetectedAt(i int64) {
	if m.adddetected_at != nil {
		*m.adddetected_at += i
	} else {
		m.adddetected_at = &i
	}
}

// AddedDetectedAt returns the value that was added to the "detected_at" field in this mutation.
func (m *AlertMutation) AddedDetectedAt() (r int64, exists bool) {
	v := m.adddetected_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearDetectedAt clears the value of the "detected_at" field.
func (m *AlertMutation) ClearDetectedAt() {
	m.detected_at = nil
	m.adddetected_at = nil
	m.clearedFields[alert.FieldDetectedAt] = struct{}{}
}

// DetectedAtCleared returns if the "detected_at" field was cleared in this mutation.
func (m *AlertMutation) DetectedAtCleared() bool {
	_, ok := m.clearedFields[alert.FieldDetectedAt]
	return ok
}

// ResetDetectedAt resets all changes to the "detected_at" field.
func (m *AlertMutation) ResetDetectedAt() {
	m.detected_at = nil
	m.adddetected_at = nil
	delete(m.clearedFields, alert.FieldDetectedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *AlertMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AlertMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *AlertMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AlertMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AlertMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetClosedAt sets the "closed_at" field.
func (m *AlertMutation) SetClosedAt(i int64) {
	m.closed_at = &i
	m.addclosed_at = nil
}

// ClosedAt returns the value of the "closed_at" field in the mutation.
func (m *AlertMutation) ClosedAt() (r int64, exists bool) {
	v := m.closed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldClosedAt returns the old "closed_at" field's value of the Alert entity.
// If the Alert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlertMutation) OldClosedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClosedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClosedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClosedAt: %w", err)
	}
	return oldValue.ClosedAt, nil
}

// AddClosedAt adds i to the "closed_at" field.
func (m *AlertMutation) AddClosedAt(i int64) {
	if m.addclosed_at != nil {
		*m.addclosed_at += i
	} else {
		m.addclosed_at = &i
	}
}

// AddedClosedAt returns the value that was added to the "closed_at" field in this mutation.
func (m *AlertMutation) AddedClosedAt() (r int64, exists bool) {
	v := m.addclosed_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearClosedAt clears the value of the "closed_at" field.
func (m *AlertMutation) ClearClosedAt() {
	m.closed_at = nil
	m.addclosed_at = nil
	m.clearedFields[alert.FieldClosedAt] = struct{}{}
}

// ClosedAtCleared returns if the "closed_at" field was cleared in this mutation.
func (m *AlertMutation) ClosedAtCleared() bool {
	_, ok := m.clearedFields[alert.FieldClosedAt]
	return ok
}

// ResetClosedAt resets all changes to the "closed_at" field.
func (m *AlertMutation) ResetClosedAt() {
	m.closed_at = nil
	m.addclosed_at = nil
	delete(m.clearedFields, alert.FieldClosedAt)
}

// AddAttributeIDs adds the "attributes" edge to the Attribute entity by ids.
func (m *AlertMutation) AddAttributeIDs(ids ...int) {
	if m.attributes == nil {
		m.attributes = make(map[int]struct{})
	}
	for i := range ids {
		m.attributes[ids[i]] = struct{}{}
	}
}

// ClearAttributes clears the "attributes" edge to the Attribute entity.
func (m *AlertMutation) ClearAttributes() {
	m.clearedattributes = true
}

// AttributesCleared reports if the "attributes" edge to the Attribute entity was cleared.
func (m *AlertMutation) AttributesCleared() bool {
	return m.clearedattributes
}

// RemoveAttributeIDs removes the "attributes" edge to the Attribute entity by IDs.
func (m *AlertMutation) RemoveAttributeIDs(ids ...int) {
	if m.removedattributes == nil {
		m.removedattributes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attributes, ids[i])
		m.removedattributes[ids[i]] = struct{}{}
	}
}

// RemovedAttributes returns the removed IDs of the "attributes" edge to the Attribute entity.
func (m *AlertMutation) RemovedAttributesIDs() (ids []int) {
	for id := range m.removedattributes {
		ids = append(ids, id)
	}
	return
}

// AttributesIDs returns the "attributes" edge IDs in the mutation.
func (m *AlertMutation) AttributesIDs() (ids []int) {
	for id := range m.attributes {
		ids = append(ids, id)
	}
	return
}

// ResetAttributes resets all changes to the "attributes" edge.
func (m *AlertMutation) ResetAttributes() {
	m.attributes = nil
	m.clearedattributes = false
	m.removedattributes = nil
}

// AddReferenceIDs adds the "references" edge to the Reference entity by ids.
func (m *AlertMutation) AddReferenceIDs(ids ...int) {
	if m.references == nil {
		m.references = make(map[int]struct{})
	}
	for i := range ids {
		m.references[ids[i]] = struct{}{}
	}
}

// ClearReferences clears the "references" edge to the Reference entity.
func (m *AlertMutation) ClearReferences() {
	m.clearedreferences = true
}

// ReferencesCleared reports if the "references" edge to the Reference entity was cleared.
func (m *AlertMutation) ReferencesCleared() bool {
	return m.clearedreferences
}

// RemoveReferenceIDs removes the "references" edge to the Reference entity by IDs.
func (m *AlertMutation) RemoveReferenceIDs(ids ...int) {
	if m.removedreferences == nil {
		m.removedreferences = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.references, ids[i])
		m.removedreferences[ids[i]] = struct{}{}
	}
}

// RemovedReferences returns the removed IDs of the "references" edge to the Reference entity.
func (m *AlertMutation) RemovedReferencesIDs() (ids []int) {
	for id := range m.removedreferences {
		ids = append(ids, id)
	}
	return
}

// ReferencesIDs returns the "references" edge IDs in the mutation.
func (m *AlertMutation) ReferencesIDs() (ids []int) {
	for id := range m.references {
		ids = append(ids, id)
	}
	return
}

// ResetReferences resets all changes to the "references" edge.
func (m *AlertMutation) ResetReferences() {
	m.references = nil
	m.clearedreferences = false
	m.removedreferences = nil
}

// AddJobIDs adds the "jobs" edge to the Job entity by ids.
func (m *AlertMutation) AddJobIDs(ids ...int) {
	if m.jobs == nil {
		m.jobs = make(map[int]struct{})
	}
	for i := range ids {
		m.jobs[ids[i]] = struct{}{}
	}
}

// ClearJobs clears the "jobs" edge to the Job entity.
func (m *AlertMutation) ClearJobs() {
	m.clearedjobs = true
}

// JobsCleared reports if the "jobs" edge to the Job entity was cleared.
func (m *AlertMutation) JobsCleared() bool {
	return m.clearedjobs
}

// RemoveJobIDs removes the "jobs" edge to the Job entity by IDs.
func (m *AlertMutation) RemoveJobIDs(ids ...int) {
	if m.removedjobs == nil {
		m.removedjobs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.jobs, ids[i])
		m.removedjobs[ids[i]] = struct{}{}
	}
}

// RemovedJobs returns the removed IDs of the "jobs" edge to the Job entity.
func (m *AlertMutation) RemovedJobsIDs() (ids []int) {
	for id := range m.removedjobs {
		ids = append(ids, id)
	}
	return
}

// JobsIDs returns the "jobs" edge IDs in the mutation.
func (m *AlertMutation) JobsIDs() (ids []int) {
	for id := range m.jobs {
		ids = append(ids, id)
	}
	return
}

// ResetJobs resets all changes to the "jobs" edge.
func (m *AlertMutation) ResetJobs() {
	m.jobs = nil
	m.clearedjobs = false
	m.removedjobs = nil
}

// Where appends a list predicates to the AlertMutation builder.
func (m *AlertMutation) Where(ps ...predicate.Alert) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AlertMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Alert).
func (m *AlertMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlertMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.title != nil {
		fields = append(fields, alert.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, alert.FieldDescription)
	}
	if m.detector != nil {
		fields = append(fields, alert.FieldDetector)
	}
	if m.status != nil {
		fields = append(fields, alert.FieldStatus)
	}
	if m.severity != nil {
		fields = append(fields, alert.FieldSeverity)
	}
	if m.detected_at != nil {
		fields = append(fields, alert.FieldDetectedAt)
	}
	if m.created_at != nil {
		fields = append(fields, alert.FieldCreatedAt)
	}
	if m.closed_at != nil {
		fields = append(fields, alert.FieldClosedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlertMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case alert.FieldTitle:
		return m.Title()
	case alert.FieldDescription:
		return m.Description()
	case alert.FieldDetector:
		return m.Detector()
	case alert.FieldStatus:
		return m.Status()
	case alert.FieldSeverity:
		return m.Severity()
	case alert.FieldDetectedAt:
		return m.DetectedAt()
	case alert.FieldCreatedAt:
		return m.CreatedAt()
	case alert.FieldClosedAt:
		return m.ClosedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlertMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case alert.FieldTitle:
		return m.OldTitle(ctx)
	case alert.FieldDescription:
		return m.OldDescription(ctx)
	case alert.FieldDetector:
		return m.OldDetector(ctx)
	case alert.FieldStatus:
		return m.OldStatus(ctx)
	case alert.FieldSeverity:
		return m.OldSeverity(ctx)
	case alert.FieldDetectedAt:
		return m.OldDetectedAt(ctx)
	case alert.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case alert.FieldClosedAt:
		return m.OldClosedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Alert field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlertMutation) SetField(name string, value ent.Value) error {
	switch name {
	case alert.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case alert.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case alert.FieldDetector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetector(v)
		return nil
	case alert.FieldStatus:
		v, ok := value.(types.AlertStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case alert.FieldSeverity:
		v, ok := value.(types.Severity)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeverity(v)
		return nil
	case alert.FieldDetectedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetectedAt(v)
		return nil
	case alert.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case alert.FieldClosedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClosedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Alert field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlertMutation) AddedFields() []string {
	var fields []string
	if m.adddetected_at != nil {
		fields = append(fields, alert.FieldDetectedAt)
	}
	if m.addcreated_at != nil {
		fields = append(fields, alert.FieldCreatedAt)
	}
	if m.addclosed_at != nil {
		fields = append(fields, alert.FieldClosedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlertMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case alert.FieldDetectedAt:
		return m.AddedDetectedAt()
	case alert.FieldCreatedAt:
		return m.AddedCreatedAt()
	case alert.FieldClosedAt:
		return m.AddedClosedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlertMutation) AddField(name string, value ent.Value) error {
	switch name {
	case alert.FieldDetectedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDetectedAt(v)
		return nil
	case alert.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case alert.FieldClosedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddClosedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Alert numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlertMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(alert.FieldTitle) {
		fields = append(fields, alert.FieldTitle)
	}
	if m.FieldCleared(alert.FieldDescription) {
		fields = append(fields, alert.FieldDescription)
	}
	if m.FieldCleared(alert.FieldDetector) {
		fields = append(fields, alert.FieldDetector)
	}
	if m.FieldCleared(alert.FieldSeverity) {
		fields = append(fields, alert.FieldSeverity)
	}
	if m.FieldCleared(alert.FieldDetectedAt) {
		fields = append(fields, alert.FieldDetectedAt)
	}
	if m.FieldCleared(alert.FieldClosedAt) {
		fields = append(fields, alert.FieldClosedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlertMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlertMutation) ClearField(name string) error {
	switch name {
	case alert.FieldTitle:
		m.ClearTitle()
		return nil
	case alert.FieldDescription:
		m.ClearDescription()
		return nil
	case alert.FieldDetector:
		m.ClearDetector()
		return nil
	case alert.FieldSeverity:
		m.ClearSeverity()
		return nil
	case alert.FieldDetectedAt:
		m.ClearDetectedAt()
		return nil
	case alert.FieldClosedAt:
		m.ClearClosedAt()
		return nil
	}
	return fmt.Errorf("unknown Alert nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlertMutation) ResetField(name string) error {
	switch name {
	case alert.FieldTitle:
		m.ResetTitle()
		return nil
	case alert.FieldDescription:
		m.ResetDescription()
		return nil
	case alert.FieldDetector:
		m.ResetDetector()
		return nil
	case alert.FieldStatus:
		m.ResetStatus()
		return nil
	case alert.FieldSeverity:
		m.ResetSeverity()
		return nil
	case alert.FieldDetectedAt:
		m.ResetDetectedAt()
		return nil
	case alert.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case alert.FieldClosedAt:
		m.ResetClosedAt()
		return nil
	}
	return fmt.Errorf("unknown Alert field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlertMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.attributes != nil {
		edges = append(edges, alert.EdgeAttributes)
	}
	if m.references != nil {
		edges = append(edges, alert.EdgeReferences)
	}
	if m.jobs != nil {
		edges = append(edges, alert.EdgeJobs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlertMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case alert.EdgeAttributes:
		ids := make([]ent.Value, 0, len(m.attributes))
		for id := range m.attributes {
			ids = append(ids, id)
		}
		return ids
	case alert.EdgeReferences:
		ids := make([]ent.Value, 0, len(m.references))
		for id := range m.references {
			ids = append(ids, id)
		}
		return ids
	case alert.EdgeJobs:
		ids := make([]ent.Value, 0, len(m.jobs))
		for id := range m.jobs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlertMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedattributes != nil {
		edges = append(edges, alert.EdgeAttributes)
	}
	if m.removedreferences != nil {
		edges = append(edges, alert.EdgeReferences)
	}
	if m.removedjobs != nil {
		edges = append(edges, alert.EdgeJobs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlertMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case alert.EdgeAttributes:
		ids := make([]ent.Value, 0, len(m.removedattributes))
		for id := range m.removedattributes {
			ids = append(ids, id)
		}
		return ids
	case alert.EdgeReferences:
		ids := make([]ent.Value, 0, len(m.removedreferences))
		for id := range m.removedreferences {
			ids = append(ids, id)
		}
		return ids
	case alert.EdgeJobs:
		ids := make([]ent.Value, 0, len(m.removedjobs))
		for id := range m.removedjobs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlertMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedattributes {
		edges = append(edges, alert.EdgeAttributes)
	}
	if m.clearedreferences {
		edges = append(edges, alert.EdgeReferences)
	}
	if m.clearedjobs {
		edges = append(edges, alert.EdgeJobs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlertMutation) EdgeCleared(name string) bool {
	switch name {
	case alert.EdgeAttributes:
		return m.clearedattributes
	case alert.EdgeReferences:
		return m.clearedreferences
	case alert.EdgeJobs:
		return m.clearedjobs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlertMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Alert unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlertMutation) ResetEdge(name string) error {
	switch name {
	case alert.EdgeAttributes:
		m.ResetAttributes()
		return nil
	case alert.EdgeReferences:
		m.ResetReferences()
		return nil
	case alert.EdgeJobs:
		m.ResetJobs()
		return nil
	}
	return fmt.Errorf("unknown Alert edge %s", name)
}

// AnnotationMutation represents an operation that mutates the Annotation nodes in the graph.
type AnnotationMutation struct {
	config
	op               Op
	typ              string
	id               *int
	timestamp        *int64
	addtimestamp     *int64
	source           *string
	name             *string
	value            *string
	clearedFields    map[string]struct{}
	attribute        *int
	clearedattribute bool
	done             bool
	oldValue         func(context.Context) (*Annotation, error)
	predicates       []predicate.Annotation
}

var _ ent.Mutation = (*AnnotationMutation)(nil)

// annotationOption allows management of the mutation configuration using functional options.
type annotationOption func(*AnnotationMutation)

// newAnnotationMutation creates new mutation for the Annotation entity.
func newAnnotationMutation(c config, op Op, opts ...annotationOption) *AnnotationMutation {
	m := &AnnotationMutation{
		config:        c,
		op:            op,
		typ:           TypeAnnotation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnnotationID sets the ID field of the mutation.
func withAnnotationID(id int) annotationOption {
	return func(m *AnnotationMutation) {
		var (
			err   error
			once  sync.Once
			value *Annotation
		)
		m.oldValue = func(ctx context.Context) (*Annotation, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Annotation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnnotation sets the old Annotation of the mutation.
func withAnnotation(node *Annotation) annotationOption {
	return func(m *AnnotationMutation) {
		m.oldValue = func(context.Context) (*Annotation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnnotationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnnotationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnnotationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTimestamp sets the "timestamp" field.
func (m *AnnotationMutation) SetTimestamp(i int64) {
	m.timestamp = &i
	m.addtimestamp = nil
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *AnnotationMutation) Timestamp() (r int64, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Annotation entity.
// If the Annotation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationMutation) OldTimestamp(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// AddTimestamp adds i to the "timestamp" field.
func (m *AnnotationMutation) AddTimestamp(i int64) {
	if m.addtimestamp != nil {
		*m.addtimestamp += i
	} else {
		m.addtimestamp = &i
	}
}

// AddedTimestamp returns the value that was added to the "timestamp" field in this mutation.
func (m *AnnotationMutation) AddedTimestamp() (r int64, exists bool) {
	v := m.addtimestamp
	if v == nil {
		return
	}
	return *v, true
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *AnnotationMutation) ResetTimestamp() {
	m.timestamp = nil
	m.addtimestamp = nil
}

// SetSource sets the "source" field.
func (m *AnnotationMutation) SetSource(s string) {
	m.source = &s
}

// Source returns the value of the "source" field in the mutation.
func (m *AnnotationMutation) Source() (r string, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the Annotation entity.
// If the Annotation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationMutation) OldSource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *AnnotationMutation) ResetSource() {
	m.source = nil
}

// SetName sets the "name" field.
func (m *AnnotationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AnnotationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Annotation entity.
// If the Annotation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AnnotationMutation) ResetName() {
	m.name = nil
}

// SetValue sets the "value" field.
func (m *AnnotationMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *AnnotationMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Annotation entity.
// If the Annotation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnotationMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *AnnotationMutation) ResetValue() {
	m.value = nil
}

// SetAttributeID sets the "attribute" edge to the Attribute entity by id.
func (m *AnnotationMutation) SetAttributeID(id int) {
	m.attribute = &id
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (m *AnnotationMutation) ClearAttribute() {
	m.clearedattribute = true
}

// AttributeCleared reports if the "attribute" edge to the Attribute entity was cleared.
func (m *AnnotationMutation) AttributeCleared() bool {
	return m.clearedattribute
}

// AttributeID returns the "attribute" edge ID in the mutation.
func (m *AnnotationMutation) AttributeID() (id int, exists bool) {
	if m.attribute != nil {
		return *m.attribute, true
	}
	return
}

// AttributeIDs returns the "attribute" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttributeID instead. It exists only for internal usage by the builders.
func (m *AnnotationMutation) AttributeIDs() (ids []int) {
	if id := m.attribute; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttribute resets all changes to the "attribute" edge.
func (m *AnnotationMutation) ResetAttribute() {
	m.attribute = nil
	m.clearedattribute = false
}

// Where appends a list predicates to the AnnotationMutation builder.
func (m *AnnotationMutation) Where(ps ...predicate.Annotation) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AnnotationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Annotation).
func (m *AnnotationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnnotationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.timestamp != nil {
		fields = append(fields, annotation.FieldTimestamp)
	}
	if m.source != nil {
		fields = append(fields, annotation.FieldSource)
	}
	if m.name != nil {
		fields = append(fields, annotation.FieldName)
	}
	if m.value != nil {
		fields = append(fields, annotation.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnnotationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case annotation.FieldTimestamp:
		return m.Timestamp()
	case annotation.FieldSource:
		return m.Source()
	case annotation.FieldName:
		return m.Name()
	case annotation.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnnotationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case annotation.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case annotation.FieldSource:
		return m.OldSource(ctx)
	case annotation.FieldName:
		return m.OldName(ctx)
	case annotation.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Annotation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnnotationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case annotation.FieldTimestamp:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case annotation.FieldSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case annotation.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case annotation.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Annotation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnnotationMutation) AddedFields() []string {
	var fields []string
	if m.addtimestamp != nil {
		fields = append(fields, annotation.FieldTimestamp)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnnotationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case annotation.FieldTimestamp:
		return m.AddedTimestamp()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnnotationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case annotation.FieldTimestamp:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown Annotation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnnotationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnnotationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnnotationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Annotation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnnotationMutation) ResetField(name string) error {
	switch name {
	case annotation.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case annotation.FieldSource:
		m.ResetSource()
		return nil
	case annotation.FieldName:
		m.ResetName()
		return nil
	case annotation.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Annotation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnnotationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attribute != nil {
		edges = append(edges, annotation.EdgeAttribute)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnnotationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case annotation.EdgeAttribute:
		if id := m.attribute; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnnotationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnnotationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnnotationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattribute {
		edges = append(edges, annotation.EdgeAttribute)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnnotationMutation) EdgeCleared(name string) bool {
	switch name {
	case annotation.EdgeAttribute:
		return m.clearedattribute
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnnotationMutation) ClearEdge(name string) error {
	switch name {
	case annotation.EdgeAttribute:
		m.ClearAttribute()
		return nil
	}
	return fmt.Errorf("unknown Annotation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnnotationMutation) ResetEdge(name string) error {
	switch name {
	case annotation.EdgeAttribute:
		m.ResetAttribute()
		return nil
	}
	return fmt.Errorf("unknown Annotation edge %s", name)
}

// AttributeMutation represents an operation that mutates the Attribute nodes in the graph.
type AttributeMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	key                *string
	value              *string
	_type              *types.AttrType
	context            *[]string
	clearedFields      map[string]struct{}
	annotations        map[int]struct{}
	removedannotations map[int]struct{}
	clearedannotations bool
	alert              *types.AlertID
	clearedalert       bool
	done               bool
	oldValue           func(context.Context) (*Attribute, error)
	predicates         []predicate.Attribute
}

var _ ent.Mutation = (*AttributeMutation)(nil)

// attributeOption allows management of the mutation configuration using functional options.
type attributeOption func(*AttributeMutation)

// newAttributeMutation creates new mutation for the Attribute entity.
func newAttributeMutation(c config, op Op, opts ...attributeOption) *AttributeMutation {
	m := &AttributeMutation{
		config:        c,
		op:            op,
		typ:           TypeAttribute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttributeID sets the ID field of the mutation.
func withAttributeID(id int) attributeOption {
	return func(m *AttributeMutation) {
		var (
			err   error
			once  sync.Once
			value *Attribute
		)
		m.oldValue = func(ctx context.Context) (*Attribute, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attribute.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttribute sets the old Attribute of the mutation.
func withAttribute(node *Attribute) attributeOption {
	return func(m *AttributeMutation) {
		m.oldValue = func(context.Context) (*Attribute, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttributeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttributeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttributeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetKey sets the "key" field.
func (m *AttributeMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *AttributeMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *AttributeMutation) ResetKey() {
	m.key = nil
}

// SetValue sets the "value" field.
func (m *AttributeMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *AttributeMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *AttributeMutation) ResetValue() {
	m.value = nil
}

// SetType sets the "type" field.
func (m *AttributeMutation) SetType(tt types.AttrType) {
	m._type = &tt
}

// GetType returns the value of the "type" field in the mutation.
func (m *AttributeMutation) GetType() (r types.AttrType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldType(ctx context.Context) (v types.AttrType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *AttributeMutation) ResetType() {
	m._type = nil
}

// SetContext sets the "context" field.
func (m *AttributeMutation) SetContext(s []string) {
	m.context = &s
}

// Context returns the value of the "context" field in the mutation.
func (m *AttributeMutation) Context() (r []string, exists bool) {
	v := m.context
	if v == nil {
		return
	}
	return *v, true
}

// OldContext returns the old "context" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldContext(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContext is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContext requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContext: %w", err)
	}
	return oldValue.Context, nil
}

// ResetContext resets all changes to the "context" field.
func (m *AttributeMutation) ResetContext() {
	m.context = nil
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by ids.
func (m *AttributeMutation) AddAnnotationIDs(ids ...int) {
	if m.annotations == nil {
		m.annotations = make(map[int]struct{})
	}
	for i := range ids {
		m.annotations[ids[i]] = struct{}{}
	}
}

// ClearAnnotations clears the "annotations" edge to the Annotation entity.
func (m *AttributeMutation) ClearAnnotations() {
	m.clearedannotations = true
}

// AnnotationsCleared reports if the "annotations" edge to the Annotation entity was cleared.
func (m *AttributeMutation) AnnotationsCleared() bool {
	return m.clearedannotations
}

// RemoveAnnotationIDs removes the "annotations" edge to the Annotation entity by IDs.
func (m *AttributeMutation) RemoveAnnotationIDs(ids ...int) {
	if m.removedannotations == nil {
		m.removedannotations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.annotations, ids[i])
		m.removedannotations[ids[i]] = struct{}{}
	}
}

// RemovedAnnotations returns the removed IDs of the "annotations" edge to the Annotation entity.
func (m *AttributeMutation) RemovedAnnotationsIDs() (ids []int) {
	for id := range m.removedannotations {
		ids = append(ids, id)
	}
	return
}

// AnnotationsIDs returns the "annotations" edge IDs in the mutation.
func (m *AttributeMutation) AnnotationsIDs() (ids []int) {
	for id := range m.annotations {
		ids = append(ids, id)
	}
	return
}

// ResetAnnotations resets all changes to the "annotations" edge.
func (m *AttributeMutation) ResetAnnotations() {
	m.annotations = nil
	m.clearedannotations = false
	m.removedannotations = nil
}

// SetAlertID sets the "alert" edge to the Alert entity by id.
func (m *AttributeMutation) SetAlertID(id types.AlertID) {
	m.alert = &id
}

// ClearAlert clears the "alert" edge to the Alert entity.
func (m *AttributeMutation) ClearAlert() {
	m.clearedalert = true
}

// AlertCleared reports if the "alert" edge to the Alert entity was cleared.
func (m *AttributeMutation) AlertCleared() bool {
	return m.clearedalert
}

// AlertID returns the "alert" edge ID in the mutation.
func (m *AttributeMutation) AlertID() (id types.AlertID, exists bool) {
	if m.alert != nil {
		return *m.alert, true
	}
	return
}

// AlertIDs returns the "alert" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AlertID instead. It exists only for internal usage by the builders.
func (m *AttributeMutation) AlertIDs() (ids []types.AlertID) {
	if id := m.alert; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAlert resets all changes to the "alert" edge.
func (m *AttributeMutation) ResetAlert() {
	m.alert = nil
	m.clearedalert = false
}

// Where appends a list predicates to the AttributeMutation builder.
func (m *AttributeMutation) Where(ps ...predicate.Attribute) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AttributeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Attribute).
func (m *AttributeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttributeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.key != nil {
		fields = append(fields, attribute.FieldKey)
	}
	if m.value != nil {
		fields = append(fields, attribute.FieldValue)
	}
	if m._type != nil {
		fields = append(fields, attribute.FieldType)
	}
	if m.context != nil {
		fields = append(fields, attribute.FieldContext)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttributeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attribute.FieldKey:
		return m.Key()
	case attribute.FieldValue:
		return m.Value()
	case attribute.FieldType:
		return m.GetType()
	case attribute.FieldContext:
		return m.Context()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttributeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attribute.FieldKey:
		return m.OldKey(ctx)
	case attribute.FieldValue:
		return m.OldValue(ctx)
	case attribute.FieldType:
		return m.OldType(ctx)
	case attribute.FieldContext:
		return m.OldContext(ctx)
	}
	return nil, fmt.Errorf("unknown Attribute field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attribute.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case attribute.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case attribute.FieldType:
		v, ok := value.(types.AttrType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case attribute.FieldContext:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContext(v)
		return nil
	}
	return fmt.Errorf("unknown Attribute field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttributeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttributeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Attribute numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttributeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttributeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttributeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Attribute nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttributeMutation) ResetField(name string) error {
	switch name {
	case attribute.FieldKey:
		m.ResetKey()
		return nil
	case attribute.FieldValue:
		m.ResetValue()
		return nil
	case attribute.FieldType:
		m.ResetType()
		return nil
	case attribute.FieldContext:
		m.ResetContext()
		return nil
	}
	return fmt.Errorf("unknown Attribute field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttributeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.annotations != nil {
		edges = append(edges, attribute.EdgeAnnotations)
	}
	if m.alert != nil {
		edges = append(edges, attribute.EdgeAlert)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttributeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attribute.EdgeAnnotations:
		ids := make([]ent.Value, 0, len(m.annotations))
		for id := range m.annotations {
			ids = append(ids, id)
		}
		return ids
	case attribute.EdgeAlert:
		if id := m.alert; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttributeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedannotations != nil {
		edges = append(edges, attribute.EdgeAnnotations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttributeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case attribute.EdgeAnnotations:
		ids := make([]ent.Value, 0, len(m.removedannotations))
		for id := range m.removedannotations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttributeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedannotations {
		edges = append(edges, attribute.EdgeAnnotations)
	}
	if m.clearedalert {
		edges = append(edges, attribute.EdgeAlert)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttributeMutation) EdgeCleared(name string) bool {
	switch name {
	case attribute.EdgeAnnotations:
		return m.clearedannotations
	case attribute.EdgeAlert:
		return m.clearedalert
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttributeMutation) ClearEdge(name string) error {
	switch name {
	case attribute.EdgeAlert:
		m.ClearAlert()
		return nil
	}
	return fmt.Errorf("unknown Attribute unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttributeMutation) ResetEdge(name string) error {
	switch name {
	case attribute.EdgeAnnotations:
		m.ResetAnnotations()
		return nil
	case attribute.EdgeAlert:
		m.ResetAlert()
		return nil
	}
	return fmt.Errorf("unknown Attribute edge %s", name)
}

// JobMutation represents an operation that mutates the Job nodes in the graph.
type JobMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	step               *int64
	addstep            *int64
	input              **model.Alert
	clearedFields      map[string]struct{}
	alert              *types.AlertID
	clearedalert       bool
	action_logs        map[int]struct{}
	removedaction_logs map[int]struct{}
	clearedaction_logs bool
	done               bool
	oldValue           func(context.Context) (*Job, error)
	predicates         []predicate.Job
}

var _ ent.Mutation = (*JobMutation)(nil)

// jobOption allows management of the mutation configuration using functional options.
type jobOption func(*JobMutation)

// newJobMutation creates new mutation for the Job entity.
func newJobMutation(c config, op Op, opts ...jobOption) *JobMutation {
	m := &JobMutation{
		config:        c,
		op:            op,
		typ:           TypeJob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJobID sets the ID field of the mutation.
func withJobID(id int) jobOption {
	return func(m *JobMutation) {
		var (
			err   error
			once  sync.Once
			value *Job
		)
		m.oldValue = func(ctx context.Context) (*Job, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Job.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJob sets the old Job of the mutation.
func withJob(node *Job) jobOption {
	return func(m *JobMutation) {
		m.oldValue = func(context.Context) (*Job, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *JobMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *JobMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *JobMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *JobMutation) ResetName() {
	m.name = nil
}

// SetStep sets the "step" field.
func (m *JobMutation) SetStep(i int64) {
	m.step = &i
	m.addstep = nil
}

// Step returns the value of the "step" field in the mutation.
func (m *JobMutation) Step() (r int64, exists bool) {
	v := m.step
	if v == nil {
		return
	}
	return *v, true
}

// OldStep returns the old "step" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldStep(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStep is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStep requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStep: %w", err)
	}
	return oldValue.Step, nil
}

// AddStep adds i to the "step" field.
func (m *JobMutation) AddStep(i int64) {
	if m.addstep != nil {
		*m.addstep += i
	} else {
		m.addstep = &i
	}
}

// AddedStep returns the value that was added to the "step" field in this mutation.
func (m *JobMutation) AddedStep() (r int64, exists bool) {
	v := m.addstep
	if v == nil {
		return
	}
	return *v, true
}

// ResetStep resets all changes to the "step" field.
func (m *JobMutation) ResetStep() {
	m.step = nil
	m.addstep = nil
}

// SetInput sets the "input" field.
func (m *JobMutation) SetInput(value *model.Alert) {
	m.input = &value
}

// Input returns the value of the "input" field in the mutation.
func (m *JobMutation) Input() (r *model.Alert, exists bool) {
	v := m.input
	if v == nil {
		return
	}
	return *v, true
}

// OldInput returns the old "input" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldInput(ctx context.Context) (v *model.Alert, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInput is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInput requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInput: %w", err)
	}
	return oldValue.Input, nil
}

// ResetInput resets all changes to the "input" field.
func (m *JobMutation) ResetInput() {
	m.input = nil
}

// SetAlertID sets the "alert" edge to the Alert entity by id.
func (m *JobMutation) SetAlertID(id types.AlertID) {
	m.alert = &id
}

// ClearAlert clears the "alert" edge to the Alert entity.
func (m *JobMutation) ClearAlert() {
	m.clearedalert = true
}

// AlertCleared reports if the "alert" edge to the Alert entity was cleared.
func (m *JobMutation) AlertCleared() bool {
	return m.clearedalert
}

// AlertID returns the "alert" edge ID in the mutation.
func (m *JobMutation) AlertID() (id types.AlertID, exists bool) {
	if m.alert != nil {
		return *m.alert, true
	}
	return
}

// AlertIDs returns the "alert" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AlertID instead. It exists only for internal usage by the builders.
func (m *JobMutation) AlertIDs() (ids []types.AlertID) {
	if id := m.alert; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAlert resets all changes to the "alert" edge.
func (m *JobMutation) ResetAlert() {
	m.alert = nil
	m.clearedalert = false
}

// AddActionLogIDs adds the "action_logs" edge to the ActionLog entity by ids.
func (m *JobMutation) AddActionLogIDs(ids ...int) {
	if m.action_logs == nil {
		m.action_logs = make(map[int]struct{})
	}
	for i := range ids {
		m.action_logs[ids[i]] = struct{}{}
	}
}

// ClearActionLogs clears the "action_logs" edge to the ActionLog entity.
func (m *JobMutation) ClearActionLogs() {
	m.clearedaction_logs = true
}

// ActionLogsCleared reports if the "action_logs" edge to the ActionLog entity was cleared.
func (m *JobMutation) ActionLogsCleared() bool {
	return m.clearedaction_logs
}

// RemoveActionLogIDs removes the "action_logs" edge to the ActionLog entity by IDs.
func (m *JobMutation) RemoveActionLogIDs(ids ...int) {
	if m.removedaction_logs == nil {
		m.removedaction_logs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.action_logs, ids[i])
		m.removedaction_logs[ids[i]] = struct{}{}
	}
}

// RemovedActionLogs returns the removed IDs of the "action_logs" edge to the ActionLog entity.
func (m *JobMutation) RemovedActionLogsIDs() (ids []int) {
	for id := range m.removedaction_logs {
		ids = append(ids, id)
	}
	return
}

// ActionLogsIDs returns the "action_logs" edge IDs in the mutation.
func (m *JobMutation) ActionLogsIDs() (ids []int) {
	for id := range m.action_logs {
		ids = append(ids, id)
	}
	return
}

// ResetActionLogs resets all changes to the "action_logs" edge.
func (m *JobMutation) ResetActionLogs() {
	m.action_logs = nil
	m.clearedaction_logs = false
	m.removedaction_logs = nil
}

// Where appends a list predicates to the JobMutation builder.
func (m *JobMutation) Where(ps ...predicate.Job) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *JobMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Job).
func (m *JobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JobMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, job.FieldName)
	}
	if m.step != nil {
		fields = append(fields, job.FieldStep)
	}
	if m.input != nil {
		fields = append(fields, job.FieldInput)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case job.FieldName:
		return m.Name()
	case job.FieldStep:
		return m.Step()
	case job.FieldInput:
		return m.Input()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case job.FieldName:
		return m.OldName(ctx)
	case job.FieldStep:
		return m.OldStep(ctx)
	case job.FieldInput:
		return m.OldInput(ctx)
	}
	return nil, fmt.Errorf("unknown Job field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case job.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case job.FieldStep:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStep(v)
		return nil
	case job.FieldInput:
		v, ok := value.(*model.Alert)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInput(v)
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JobMutation) AddedFields() []string {
	var fields []string
	if m.addstep != nil {
		fields = append(fields, job.FieldStep)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JobMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case job.FieldStep:
		return m.AddedStep()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JobMutation) AddField(name string, value ent.Value) error {
	switch name {
	case job.FieldStep:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStep(v)
		return nil
	}
	return fmt.Errorf("unknown Job numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JobMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JobMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Job nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JobMutation) ResetField(name string) error {
	switch name {
	case job.FieldName:
		m.ResetName()
		return nil
	case job.FieldStep:
		m.ResetStep()
		return nil
	case job.FieldInput:
		m.ResetInput()
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JobMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.alert != nil {
		edges = append(edges, job.EdgeAlert)
	}
	if m.action_logs != nil {
		edges = append(edges, job.EdgeActionLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JobMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case job.EdgeAlert:
		if id := m.alert; id != nil {
			return []ent.Value{*id}
		}
	case job.EdgeActionLogs:
		ids := make([]ent.Value, 0, len(m.action_logs))
		for id := range m.action_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedaction_logs != nil {
		edges = append(edges, job.EdgeActionLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JobMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case job.EdgeActionLogs:
		ids := make([]ent.Value, 0, len(m.removedaction_logs))
		for id := range m.removedaction_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedalert {
		edges = append(edges, job.EdgeAlert)
	}
	if m.clearedaction_logs {
		edges = append(edges, job.EdgeActionLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JobMutation) EdgeCleared(name string) bool {
	switch name {
	case job.EdgeAlert:
		return m.clearedalert
	case job.EdgeActionLogs:
		return m.clearedaction_logs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JobMutation) ClearEdge(name string) error {
	switch name {
	case job.EdgeAlert:
		m.ClearAlert()
		return nil
	}
	return fmt.Errorf("unknown Job unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JobMutation) ResetEdge(name string) error {
	switch name {
	case job.EdgeAlert:
		m.ResetAlert()
		return nil
	case job.EdgeActionLogs:
		m.ResetActionLogs()
		return nil
	}
	return fmt.Errorf("unknown Job edge %s", name)
}

// ReferenceMutation represents an operation that mutates the Reference nodes in the graph.
type ReferenceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	source        *string
	title         *string
	url           *string
	comment       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Reference, error)
	predicates    []predicate.Reference
}

var _ ent.Mutation = (*ReferenceMutation)(nil)

// referenceOption allows management of the mutation configuration using functional options.
type referenceOption func(*ReferenceMutation)

// newReferenceMutation creates new mutation for the Reference entity.
func newReferenceMutation(c config, op Op, opts ...referenceOption) *ReferenceMutation {
	m := &ReferenceMutation{
		config:        c,
		op:            op,
		typ:           TypeReference,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReferenceID sets the ID field of the mutation.
func withReferenceID(id int) referenceOption {
	return func(m *ReferenceMutation) {
		var (
			err   error
			once  sync.Once
			value *Reference
		)
		m.oldValue = func(ctx context.Context) (*Reference, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reference.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReference sets the old Reference of the mutation.
func withReference(node *Reference) referenceOption {
	return func(m *ReferenceMutation) {
		m.oldValue = func(context.Context) (*Reference, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReferenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReferenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReferenceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSource sets the "source" field.
func (m *ReferenceMutation) SetSource(s string) {
	m.source = &s
}

// Source returns the value of the "source" field in the mutation.
func (m *ReferenceMutation) Source() (r string, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the Reference entity.
// If the Reference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReferenceMutation) OldSource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *ReferenceMutation) ResetSource() {
	m.source = nil
}

// SetTitle sets the "title" field.
func (m *ReferenceMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ReferenceMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Reference entity.
// If the Reference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReferenceMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ReferenceMutation) ResetTitle() {
	m.title = nil
}

// SetURL sets the "url" field.
func (m *ReferenceMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *ReferenceMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Reference entity.
// If the Reference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReferenceMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *ReferenceMutation) ResetURL() {
	m.url = nil
}

// SetComment sets the "comment" field.
func (m *ReferenceMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *ReferenceMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Reference entity.
// If the Reference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReferenceMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *ReferenceMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[reference.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *ReferenceMutation) CommentCleared() bool {
	_, ok := m.clearedFields[reference.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *ReferenceMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, reference.FieldComment)
}

// Where appends a list predicates to the ReferenceMutation builder.
func (m *ReferenceMutation) Where(ps ...predicate.Reference) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ReferenceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Reference).
func (m *ReferenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReferenceMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.source != nil {
		fields = append(fields, reference.FieldSource)
	}
	if m.title != nil {
		fields = append(fields, reference.FieldTitle)
	}
	if m.url != nil {
		fields = append(fields, reference.FieldURL)
	}
	if m.comment != nil {
		fields = append(fields, reference.FieldComment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReferenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reference.FieldSource:
		return m.Source()
	case reference.FieldTitle:
		return m.Title()
	case reference.FieldURL:
		return m.URL()
	case reference.FieldComment:
		return m.Comment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReferenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reference.FieldSource:
		return m.OldSource(ctx)
	case reference.FieldTitle:
		return m.OldTitle(ctx)
	case reference.FieldURL:
		return m.OldURL(ctx)
	case reference.FieldComment:
		return m.OldComment(ctx)
	}
	return nil, fmt.Errorf("unknown Reference field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReferenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reference.FieldSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case reference.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case reference.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case reference.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	}
	return fmt.Errorf("unknown Reference field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReferenceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReferenceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReferenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Reference numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReferenceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(reference.FieldComment) {
		fields = append(fields, reference.FieldComment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReferenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReferenceMutation) ClearField(name string) error {
	switch name {
	case reference.FieldComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown Reference nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReferenceMutation) ResetField(name string) error {
	switch name {
	case reference.FieldSource:
		m.ResetSource()
		return nil
	case reference.FieldTitle:
		m.ResetTitle()
		return nil
	case reference.FieldURL:
		m.ResetURL()
		return nil
	case reference.FieldComment:
		m.ResetComment()
		return nil
	}
	return fmt.Errorf("unknown Reference field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReferenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReferenceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReferenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReferenceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReferenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReferenceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReferenceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Reference unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReferenceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Reference edge %s", name)
}
