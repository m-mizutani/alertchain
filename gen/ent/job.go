// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/m-mizutani/alertchain/gen/ent/alert"
	"github.com/m-mizutani/alertchain/gen/ent/job"
	"github.com/m-mizutani/alertchain/pkg/domain/model"
	"github.com/m-mizutani/alertchain/pkg/domain/types"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Step holds the value of the "step" field.
	Step int64 `json:"step,omitempty"`
	// Input holds the value of the "input" field.
	Input *model.Alert `json:"input,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges      JobEdges `json:"edges"`
	alert_jobs *types.AlertID
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// Alert holds the value of the alert edge.
	Alert *Alert `json:"alert,omitempty"`
	// ActionLogs holds the value of the action_logs edge.
	ActionLogs []*ActionLog `json:"action_logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AlertOrErr returns the Alert value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) AlertOrErr() (*Alert, error) {
	if e.loadedTypes[0] {
		if e.Alert == nil {
			// The edge alert was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: alert.Label}
		}
		return e.Alert, nil
	}
	return nil, &NotLoadedError{edge: "alert"}
}

// ActionLogsOrErr returns the ActionLogs value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) ActionLogsOrErr() ([]*ActionLog, error) {
	if e.loadedTypes[1] {
		return e.ActionLogs, nil
	}
	return nil, &NotLoadedError{edge: "action_logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldInput:
			values[i] = new([]byte)
		case job.FieldID, job.FieldStep:
			values[i] = new(sql.NullInt64)
		case job.FieldName:
			values[i] = new(sql.NullString)
		case job.ForeignKeys[0]: // alert_jobs
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Job", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case job.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				j.Name = value.String
			}
		case job.FieldStep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				j.Step = value.Int64
			}
		case job.FieldInput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &j.Input); err != nil {
					return fmt.Errorf("unmarshal field input: %w", err)
				}
			}
		case job.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_jobs", values[i])
			} else if value.Valid {
				j.alert_jobs = new(types.AlertID)
				*j.alert_jobs = types.AlertID(value.String)
			}
		}
	}
	return nil
}

// QueryAlert queries the "alert" edge of the Job entity.
func (j *Job) QueryAlert() *AlertQuery {
	return (&JobClient{config: j.config}).QueryAlert(j)
}

// QueryActionLogs queries the "action_logs" edge of the Job entity.
func (j *Job) QueryActionLogs() *ActionLogQuery {
	return (&JobClient{config: j.config}).QueryActionLogs(j)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return (&JobClient{config: j.config}).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v", j.ID))
	builder.WriteString(", name=")
	builder.WriteString(j.Name)
	builder.WriteString(", step=")
	builder.WriteString(fmt.Sprintf("%v", j.Step))
	builder.WriteString(", input=")
	builder.WriteString(fmt.Sprintf("%v", j.Input))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job

func (j Jobs) config(cfg config) {
	for _i := range j {
		j[_i].config = cfg
	}
}
